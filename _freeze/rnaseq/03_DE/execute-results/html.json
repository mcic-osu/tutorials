{
  "hash": "caa5b3e07f5c779881ae4445f26c49bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gene count table analysis\"\nsubtitle: \"Exploratory and differential expression analysis\"\nauthor: Jelmer Poelstra\ndate: 2025-01-27\nexecute: \n  eval: true\n  cache: true\nknitr:\n  opts_chunk:\n    out.width: \"85%\"\n    class-output: styled-output\nnumber-depth: 3\nproject:\n  execute-dir: project\neditor_options: \n  chunk_output_type: console\neditor: source\n---\n\n\n\n\n-------\n\n<br>\n\nAfter running steps like read pre-processing, alignment, and quantification using the\nnf-core rnaseq workflow, or another method, you will have a **gene count table**.\nIn this tutorial, with that gene count table, you will:\n\n- Create an R object that also incorporates the metadata\n- Perform exploratory data analysis including a PCA\n- Run a Differential Expression (DE) analysis\n- Extract and visualize the DE results\n\n<br>\n\n## Getting set up\n\n### Start an RStudio session at OSC\n\n1.  Log in to OSC at <https://ondemand.osc.edu>\n2.  Click on **`Interactive Apps`** (top bar) and then **`RStudio Server`**\n    (all the way at the bottom)\n3.  Fill out the form as follows:\n    -   Cluster: **`Pitzer`**\n    -   R version: **`4.3.0`**\n    -   Project: **`PAS2658`**\n    -   Number of hours: **`3`**\n    -   Node type: **`any`**\n    -   Number of cores: **`2`**\n4. Click the big blue **`Launch`** button at the bottom.\n5. Now, you should be sent to a new page with a box at the top for your RStudio Server\n   \"job\", which should initially be \"Queued\" (waiting to start).\n\n<details><summary>*Click to see a screenshot*</summary>\n![](img/rstudio_queued.png){fig-align=\"center\" width=\"70%\"}\n</details>\n\n6. Your job should start running very soon,\n   with the top bar of the box turning green and saying \"Running\".\n7. Click **`Connect to RStudio Server`** at the bottom of the box,\n   and an RStudio Server instance will open in a new browser tab.\n   You're ready to go!\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: {.callout-note collapse=\"true\"}\n#### Optional: change two RStudio settings _(Click to expand)_\n\nFirst, prevent R from saving your **\"Workspace\"**:\n\n1. Click **`Tools`** (top bar, below your browser's address bar) \\> **`Global Options`**\n2. In the pop-up window (stay on the `General` tab),\n   change the settings under the \"Workspace\" heading to:\n\n![](img/workspace.png){fig-align=\"center\" width=\"45%\"}\n\nWhy are we doing this?\nIn short, the default behavior of saving and restoring your \"Workspace\", which are all the\nitems (objects) that you create during an R session, is bad practice. Instead, you should\nrecreate your environment from a script and/or saved files with individual pieces of data,\nas we'll do today.\n\n-----\n\nSecond, \"update\" your **pipe symbol** from **`%>%`** [^1] to **`|>`** [^2]:\n\n[^1]: An older pipe, which requires loading an R package to work\n[^2]: The new base R pipe that does not require a package\n\n1.  Again click **`Tools`** \\> **`Global Options`** (you may still be there)\n2.  Now go to **`Code`** tab in the side panel on the left, and check the box for\n    `Use native pipe operator, |> (requires R 4.1+)`\n3.  Click **`OK`** at the bottom of the pop-up window\n\n![](img/rstudio_pipe_ed.png){fig-align=\"center\" width=\"70%\"}\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Create a new RStudio Project\n\nUsing an \"RStudio Project\" will most of all help to make sure your working directory in R\nis correct. To create a new RStudio Project inside your personal dir in\n`/fs/scratch/PAS2658/<your-name>/Lab9`:\n\n1.  Click **`File`** (top bar, below your browser's address bar) \\> **`New Project`**\n2.  In the popup window, click **`Existing Directory`**.\n\n<details><summary>*Click to see a screenshot*</summary>\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n![](img/rstudio_proj_existingdir.png){fig-align=\"center\" width=\"40%\"}\n\n</details>\n\n3.  Click **`Browse...`** to select your personal dir.\n\n<details><summary>*Click to see a screenshot*</summary>\n\n![](img/rstudio_proj_browse.png){fig-align=\"center\" width=\"40%\"}\n\n</details>\n\n4.  In the next window, you should be in your Home directory (abbreviated as **`~`**),\n    from which you can't click your way to `/fs/scratch`! Instead, you'll first have to\n    click on the (very small!) **`...`** highlighted in the screenshot below:\n\n![](img/rstudio_proj_dotdotdot_ed.png){fig-align=\"center\" width=\"50%\"}\n\n5.  Type at least part of the path to your dir in `/fs/scratch/PAS2658`,\n    e.g. as shown below, and click **`OK`**:\n\n![(This doesn't show the correct OSC project but you get the idea.)](img/rstudio_proj_path.png){fig-align=\"center\" width=\"35%\"}\n\n6.  Now you should be able to browse/click the rest of the way to your `Lab9` dir.\n7.  Click **`Choose`** to pick your selected directory.\n8.  Click **`Create Project`**.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Create an R script\n\nWe're going to write all our code in an R script instead of typing it in the console.\nThis helps us to keep track of what we've been doing,\nand enables us to re-run our code after modifying input data or one of the lines of code.\n\nCreate and open a new R script by clicking **`File`** (top menu bar) \\> **`New File`** \\>\n**`R Script`**.\nSave this new script right away by clicking **`File`** \\> **`Save As`**, \nand save it with a name like **`scripts/DE.R`**\n(inside the `Lab9` dir which should be automatically selected).\n\n::: callout-important\n#### Make sure to type all the R code below inside your script, and then send it to the console from there.\n\nYou can send code to the console by pressing <kbd>**Ctrl**</kbd> **+**\n<kbd>**Enter**</kbd> on Windows, or <kbd>Cmd</kbd> + <kbd>Return</kbd> on a Mac.\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Load the necessary packages\n\nIn R, we need to install and then use \"packages\" (basically, add-ons) to perform\nspecialized tasks like differential expression analysis[^3]. Installing packages is quite\nstraightforward in principle, but in RStudio Server at OSC, there can be some hiccups.\n\n[^3]: And even for more basic tasks, it is common to use packages that are preferred over\n    the functionality that is by default available in R, like in the case of plotting.\n\nI have therefore created a \"**library**\" (a directory with a collection of packages) for\nyou --- you can load the packages from that library, without needing to install them\nyourself. Copy the code below into your R script and then send it to the R console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, we define the dir that has the custom library:\ndyn.load(\"/fs/ess/PAS0471/jelmer/software/GLPK/lib/libglpk.so.40\", local = FALSE)\ncustom_library <- \"/fs/ess/PAS0471/jelmer/R/rnaseq\"\n.libPaths(custom_library)\n\n# Then, we load all needed R packages from that library:\nlibrary(tidyverse)          # Misc. data manipulation and plotting\nlibrary(pheatmap)           # Heatmap plot\nlibrary(EnhancedVolcano)    # Volcano plot\nlibrary(DESeq2)             # Differential expression analysis\n```\n:::\n\n\n\n\n<details>\n<summary>This will produce output in the R console (a lot when loading DESeq2), and some\nof it in orange, but all should be good unless you see explicit errors at the bottom\n(*Click to see expected output*)</summary>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pheatmap)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EnhancedVolcano)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggrepel\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DESeq2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: S4Vectors\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: stats4\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: BiocGenerics\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'BiocGenerics'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:lubridate':\n\n    intersect, setdiff, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    combine, intersect, setdiff, union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, setdiff, table,\n    tapply, union, unique, unsplit, which.max, which.min\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'S4Vectors'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:lubridate':\n\n    second, second<-\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    first, rename\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:tidyr':\n\n    expand\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:utils':\n\n    findMatches\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: IRanges\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'IRanges'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:lubridate':\n\n    %within%\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    collapse, desc, slice\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:purrr':\n\n    reduce\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: GenomicRanges\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: GenomeInfoDb\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: SummarizedExperiment\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: MatrixGenerics\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: matrixStats\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'matrixStats'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    count\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'MatrixGenerics'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Biobase\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'Biobase'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n```\n\n\n:::\n:::\n\n\n\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Define our input files\n\nFor the differential expression analysis, we have the following input files:\n\n- **Metadata table** ---\n  Metadata for the study, linking sample IDs to treatments\n- **Gene count table** ---\n  Produced by the [nf-core rnaseq workflow](https://nf-co.re/rnaseq)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# NOTE: here I am providing the path to my gene count table,\n#       but if you ran the workflow to completion, you can use your own.\n# We'll save the paths to our input files for later use\ncount_table_file <- \"/fs/scratch/PAS2658/jelmer/share/results/salmon.merged.gene_counts_length_scaled.tsv\"\nmetadata_file <- \"data/meta/metadata.tsv\"\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n<br>\n\n## Create a DESeq2 object\n\nLike in the *Culex* paper whose data we are working with, we will perform a Principal\nComponent Analysis (PCA) and a Differential Expression (DE) analysis using the popular\n**DESeq2** package\n([paper](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-014-0550-8),\n[website](https://bioconductor.org/packages/release/bioc/html/DESeq2.html)).\n\nThe DESeq2 package has its own \"object type\" (a specific R format type) and before we can\ndo anything else, we need to create a DESeq2 object from three components:\n\n1.  **Metadata**\\\n    Our independent variables should be in the metadata, allowing DESeq2 to compare groups\n    of samples.\n2.  **Count table**\\\n    A matrix (table) with one row per gene, and one column per sample.\n3.  **A statistical design**\\\n    A statistical design formula (basically, which groups to compare) will tell DESEq2\n    *how* to analyze the data\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Metadata\n\nFirst, we'll load the metadata file and take a look at the resulting data frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in the count table\nmeta_raw <- read_tsv(metadata_file, show_col_types = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a look at the first 6 rows\nhead(meta_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n# A tibble: 6 × 3\n  sample_id   time  treatment  \n  <chr>       <chr> <chr>      \n1 ERR10802882 10dpi cathemerium\n2 ERR10802875 10dpi cathemerium\n3 ERR10802879 10dpi cathemerium\n4 ERR10802883 10dpi cathemerium\n5 ERR10802878 10dpi control    \n6 ERR10802884 10dpi control    \n```\n\n\n:::\n:::\n\n\n\n\nWe'll make sure the data frame is sorted by sample ID, and that the sample IDs are\ncontained in \"row names\":\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the metadata so it can be loaded into DESeq2\nmeta <- meta_raw |>\n  # 1. Sort by the 'sample_id' column\n  arrange(sample_id) |>\n  # 2. Turn the 'sample_id' column into row names:\n  column_to_rownames(\"sample_id\") |>\n  # 3. Turn the 'time' and 'treatment' columns into \"factors\":\n  mutate(time = factor(time, levels = c(\"24hpi\", \"10dpi\")),\n         treatment = factor(treatment, levels = c(\"control\", \"cathemerium\", \"relictum\")))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a look at the first 6 rows\nhead(meta)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n             time   treatment\nERR10802863 24hpi     control\nERR10802864 24hpi cathemerium\nERR10802865 24hpi    relictum\nERR10802866 24hpi     control\nERR10802867 24hpi cathemerium\nERR10802868 24hpi    relictum\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip appearance=\"minimal\"}\n*In the two outputs above, note the difference between having the sample IDs as a separate\ncolumn versus as row names.*\n:::\n\n::: {.callout-note collapse=\"true\"}\n### Factors are a common R data type for categorical variables *(Click to expand)*\n\nWe changed the two independent variable columns (`time` and `treatment`) into factors,\nbecause DESEq2 wants this --- this also allowed us to use a custom, non-alphanumeric\nordering where `24hpi` comes before `10dpi`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(meta$time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 24hpi 24hpi 24hpi 24hpi 24hpi 24hpi\nLevels: 24hpi 10dpi\n```\n\n\n:::\n:::\n\n\n\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Gene count table\n\nSecond, load the gene count table into R:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in the count table\ncount_df <- read_tsv(count_table_file, show_col_types = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a look at the first 6 rows\nhead(count_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n# A tibble: 6 × 24\n  gene_id gene_name ERR10802863 ERR10802864 ERR10802865 ERR10802866 ERR10802867\n  <chr>   <chr>           <dbl>       <dbl>       <dbl>       <dbl>       <dbl>\n1 ATP6    ATP6         10275.       8255.       4103.      18615.      11625.  \n2 ATP8    ATP8             3.85        2.92        2.33        7.76        7.01\n3 COX1    COX1         88041.      83394.      36975.     136054.     130863.  \n4 COX2    COX2          8749.       7925.       2901.      16802.      10026.  \n5 COX3    COX3         55772.      50312.      35074.      80510.      69850.  \n6 CYTB    CYTB         38543.      36352.      22185.      62147.      57461.  \n# ℹ 17 more variables: ERR10802868 <dbl>, ERR10802869 <dbl>, ERR10802870 <dbl>,\n#   ERR10802871 <dbl>, ERR10802874 <dbl>, ERR10802875 <dbl>, ERR10802876 <dbl>,\n#   ERR10802877 <dbl>, ERR10802878 <dbl>, ERR10802879 <dbl>, ERR10802880 <dbl>,\n#   ERR10802881 <dbl>, ERR10802882 <dbl>, ERR10802883 <dbl>, ERR10802884 <dbl>,\n#   ERR10802885 <dbl>, ERR10802886 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nAgain, we have to make several modifications before we can include it in the DESeq2 object.\nDESeq2 expects with whole numbers (integers) and with gene IDs as row names:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the count table so it can be loaded into DESeq2\ncount_mat <- count_df |>\n  # 1. Turn the 'gene_id' column into row names:\n  column_to_rownames(\"gene_id\") |>\n  # 2. Remove a remaining non-numeric column (which has gene names):\n  select(-gene_name) |>\n  # 3. Round everything to whole numbers:\n  round() |>\n  # 4. Convert it to a formal 'matrix' format:\n  as.matrix()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take a look at the first 6 rows\nhead(count_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n     ERR10802863 ERR10802864 ERR10802865 ERR10802866 ERR10802867 ERR10802868\nATP6       10275        8255        4103       18615       11625        7967\nATP8           4           3           2           8           7           2\nCOX1       88041       83394       36975      136054      130863       62279\nCOX2        8749        7925        2901       16802       10026        6701\nCOX3       55772       50312       35074       80510       69850       42478\nCYTB       38543       36352       22185       62147       57461       28159\n     ERR10802869 ERR10802870 ERR10802871 ERR10802874 ERR10802875 ERR10802876\nATP6       12788        4408       13648       13834        1346       10032\nATP8           2           0           2           1           3           2\nCOX1      109596      106402      104394       77682       38276       78290\nCOX2       11494        6603       11151        9893        1473       13146\nCOX3       68228       71945       66900       52368       14665       37275\nCYTB       46219       52035       46090       35247       17449       38762\n     ERR10802877 ERR10802878 ERR10802879 ERR10802880 ERR10802881 ERR10802882\nATP6         987        1834        3337        5036        1983       11586\nATP8           0           0           0           3           0          27\nCOX1       17785       32099       64490       63960       50965       76113\nCOX2        1141        1907        3439        8334        2063       12752\nCOX3        8797       15948       26278       29997       17802       35419\nCYTB       11177       22262       34368       33401       25854       43912\n     ERR10802883 ERR10802884 ERR10802885 ERR10802886\nATP6       18821        2792       11749        6682\nATP8          40           0           8           1\nCOX1      108343       65829      107741       94682\nCOX2       19148        2713       17947       10656\nCOX3       51441       24915       50029       47750\nCYTB       57844       34616       50587       51198\n```\n\n\n:::\n:::\n\n\n\n\n#### Check that the sample IDs match\n\nWhen creating the DESeq2 object, DESeq2 assumes that sample IDs in both tables match and\nare provided in the same order. Let's make sure this is indeed the case:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check that sample IDs in the metadata and the count table match\nall(row.names(meta) == colnames(count_mat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Create the DESeq2 object\n\nWe will create the DESeq2 object using the function `DESeqDataSetFromMatrix()`, which we\nwill provide with three arguments corresponding to the components discussed above:\n\n-   The metadata with argument **`colData`**.\n-   The count data with argument **`countData`**.\n-   The statistical design for the DE analysis with argument **`design`**. For now, we\n    will specify **`~1`**, which effectively means \"no design\" --- we will change this\n    before the actual DE analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the DESeq2 object\n# (`dds` is a name commonly used for DESeq2 objects, short for \"DESeq Data Set\")\ndds <- DESeqDataSetFromMatrix(\n  colData = meta,\n  countData = count_mat,\n  design = ~ 1\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nconverting counts to integer mode\n```\n\n\n:::\n:::\n\n\n\n\nBefore we will run the differential expression analysis, though, we will do a bit of\nexploratory data analysis using our `dds` object.\n\n<br>\n\n## Exploratory Data Analysis\n\n### Our count matrix\n\nWhat are the number of rows (=number of genes) and columns (=number of samples) of our\ncount matrix?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(count_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 18855    22\n```\n\n\n:::\n:::\n\n\n\n\nHow many genes have total (= across all samples) counts that are non-zero?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(count_mat[rowSums(count_mat) > 0, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 17788\n```\n\n\n:::\n:::\n\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise: gene counts\n\n- How many genes have total counts of at least 10?\n\n<details><summary>*Click to see the solution*</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(count_mat[rowSums(count_mat) >= 10, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 16682\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n- *Bonus*: How many genes have *mean* counts of at least 10?\n\n<details><summary>*Click to see the solution*</summary>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now we need to divide by the number of samples, which is the number of columns,\n# which we can get with 'ncol'\nnrow(count_mat[rowSums(count_mat) / ncol(count_mat) >= 10, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 12529\n```\n\n\n:::\n:::\n\n\n\n</details>\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nHow do the \"library sizes\",\ni.e. the summed per-sample gene counts, compare across samples?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(count_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\nERR10802863 ERR10802864 ERR10802865 ERR10802866 ERR10802867 ERR10802868 \n   24297245    17177436    22745445    26849403    21471477    17506262 \nERR10802869 ERR10802870 ERR10802871 ERR10802874 ERR10802875 ERR10802876 \n   24299398    25490128    26534405    22194841    18927885    28804150 \nERR10802877 ERR10802878 ERR10802879 ERR10802880 ERR10802881 ERR10802882 \n    9498249    14807513    20667093    23107463    17545375    19088206 \nERR10802883 ERR10802884 ERR10802885 ERR10802886 \n   21418234    19420046    24367372    25452228 \n```\n\n\n:::\n:::\n\n\n\n\n::: exercise\n#### {{< fa user-edit >}} Bonus exercise: nicer counts\n\nThat's not so easy to read / interpret. Can you instead get these numbers in millions,\nrounded to whole numbers, and sorted from low to high?\n\n<details><summary>*Click to see the solution*</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(round(colSums(count_mat) / 1000000))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\nERR10802877 ERR10802878 ERR10802864 ERR10802868 ERR10802881 ERR10802875 \n          9          15          17          18          18          19 \nERR10802882 ERR10802884 ERR10802867 ERR10802879 ERR10802883 ERR10802874 \n         19          19          21          21          21          22 \nERR10802865 ERR10802880 ERR10802863 ERR10802869 ERR10802885 ERR10802870 \n         23          23          24          24          24          25 \nERR10802886 ERR10802866 ERR10802871 ERR10802876 \n         25          27          27          29 \n```\n\n\n:::\n:::\n\n\n\n\n</details>\n:::\n\n<br>\n\n### Principal Component Analysis (PCA)\n\nWe will run a PCA to examine overall patterns of (dis)similarity among samples,\nhelping us answer questions like:\n\n- Do the samples cluster by treatment (infection status) and/or time point?\n- Which of these two variables has a greater effect on overall patterns of gene expression?\n- Is there an overall *interaction* between these two variables?\n\nFirst, normalize the count data to account for differences in library size\namong samples and \"stabilize\" the variance among genes[^4]:\n\n[^4]: Specifically, the point is to remove the dependence of the variance in expression\n      level on its mean, among genes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndds_vst <- varianceStabilizingTransformation(dds)\n```\n:::\n\n\n\n\n::: callout-note\n#### The authors of the study did this as well:\n\n> *We carried out a Variance Stabilizing Transformation (VST) of the counts to represent\n> the samples on a PCA plot.*\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nNext, run and plot the PCA with a single function call, `plotPCA` from DESeq2:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# With 'intgroup' we specify the variables (columns) to color samples by\nplotPCA(dds_vst, intgroup = c(\"time\", \"treatment\"))\n```\n:::\n\n\n\n```bash-out\nusing ntop=500 top features by variance\n```\n\n![](img/PCA.png){fig-align=\"center\" width=\"90%\"}\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise: PCA\n\n- Based on your PCA plot,\n  try to answer the three questions asked at the beginning of this PCA section.\n\n- How does our plot compare to the PCA plot in the paper (Figure 1),\n  in terms of the conclusions you just drew in the previous exercise.\n\n<details><summary>*Click to see the paper's Figure 1*</summary>\n\n![](img/garrigo_PCA.jpeg)\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n------------------------------------------------------------------------------------------\n\n- *Bonus*: Compare the PCA plot with different numbers of included genes\n  (Hint: figure out how to do so by looking at the help by running `?plotPCA`).\n\n- *Bonus*: Customize the PCA plot --- e.g. can you \"separate\" treatment and time point\n  (different shapes for one variable, and different colors for the other),\n  like in Fig. 1 of the paper?\n\n<details><summary>*Click to see some hints for PCA plot customization*</summary>\n\nTo expand on the point of the exercise: in the plot we made above, each combination of\ntime point and treatment has a distinct color --- it would be better to use **point\ncolor** only to distinguish one of the variables, and **point shape** to distinguish the\nother variable (as was also done in the paper's Fig. 1).\n\nTo be able to customize the plot properly, we best build it from scratch ourselves, rather\nthan using the `plotPCA` function. But then how do we get the input data in the right\nshape?\n\nA nice trick is that we can use `returnData = TRUE` in the `plotPCA` function, to get\nplot-ready formatted data instead of an actual plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_df <- plotPCA(dds_vst, ntop = 500,\n                  intgroup = c(\"time\", \"treatment\"), returnData = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nusing ntop=500 top features by variance\n```\n\n\n:::\n:::\n\n\n\n\nWith that `pca_df` dataframe in hand, it will be relatively straightforward to customize\nthe plot, if you know some ggplot2.\n\n</details>\n\n<details><summary>*Click to see a possible solution*</summary>\n\nFirst, we'll get the data in the right format, as explained in the hint:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_df <- plotPCA(dds_vst, ntop = 500,\n                  intgroup = c(\"time\", \"treatment\"), returnData = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nusing ntop=500 top features by variance\n```\n\n\n:::\n:::\n\n\n\n\nSecond, we'll extract and store the percentage of variance explained by different\nprincipal components, so we can later add this information to the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct_var <- round(100 * attr(pca_df, \"percentVar\"), 1)\npct_var\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 85.3  3.1\n```\n\n\n:::\n:::\n\n\n\n\nNow we can make the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(pca_df,\n       aes(x = PC1, y = PC2, color = treatment, shape = time)) +\n  geom_point(size = 5) +\n  labs(x = paste0(\"PC1 (\", pct_var[1], \"%)\"),\n       y = paste0(\"PC2 (\", pct_var[2], \"%)\")) +\n  scale_color_brewer(palette = \"Dark2\", name = \"Infection status\") +\n  scale_shape(name = \"Time points\") +\n  theme_bw() +\n  theme(panel.grid.minor = element_blank())\n```\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-30-1.png){width=85%}\n:::\n:::\n\n\n\n\n</details>\n:::\n\n<br>\n\n## Differential Expression (DE) analysis\n\n### Figuring out how to do the analysis\n\nFirst, let's see how the DE analysis was done in the paper:\n\n> *Then, we used the DESeq2 package (Love et al., 2014) to perform the differential gene\n> expression analysis comparing: (i) P. relictum-infected mosquitoes vs. controls, (ii) P.\n> cathemerium-infected mosquitoes vs. controls, and (iii) P. relictum-infected mosquitoes\n> vs. P. cathemerium-infected mosquitoes.*\n\nThis is not terribly detailed and could be interpreted in a couple of different ways. For\nexample, they may have compared infection statuses by *ignoring* time points ***or*** by\n*controlling for* time points (and there are different ways to do the latter).\n\n_Ignoring time_ would mean analyzing the full dataset (all time points) while only using the\ninfection status as an independent variable, i.e. the design `~treatment`.\n\n<details><summary>{{< fa user-edit >}} Given the PCA results, do you think that ignoring the `time` variable is a good idea? _(Click for the answer)_</summary>\nNo: the time variable clearly has a large effect on overall patterns of gene expression,\nin fact more so than the treatment..\n</details>\n\n_Controlling for time_ can be done in two ways:\n\n- A two-factor analysis: `~ time + treatment`.\n- Pairwise comparisons between each combination of time and treatment\n  (we'll see below *how* we can do that).\n\nIf we take a look at Table 1 with the DE results, it will become clearer how they did\ntheir analysis:\n\n![](img/paper_table1.png){fig-align=\"center\" width=\"80%\"}\n\n<details><summary>{{< fa user-edit >}} How do you interpret this: did they run pairwise comparisons or a two-factor model? _(Click for the answer)_</summary>\nIt looks like they performed pairwise comparisons between each combination of time\nand treatment.\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\nThat brings us a step closer,\nbut pairwise comparisons with \\>1 independent variable can (also!) be done in two ways:\n\n- After **subsetting** the dataset to each combination of time and treatment.\n- After creating a single, **combined independent variable** that is a combination of time and treatment.\n\nThe latter method is the more common one, and is what we will do below[^5].\n\n[^5]: I can't tell from the paper which method they used\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Setting the statistical design\n\nWe will now create a new variable that is a combination of `treatment` and `time`,\nand call it `group`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a combined variable called 'group':\ndds$group <- factor(paste(dds$treatment, dds$time, sep = \"_\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Which unique values does 'group' have, and how many samples are in each?\ntable(dds$group)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n\ncathemerium_10dpi cathemerium_24hpi     control_10dpi     control_24hpi \n                4                 3                 4                 3 \n   relictum_10dpi    relictum_24hpi \n                4                 4 \n```\n\n\n:::\n:::\n\n\n\n\nNext, we set the analysis design:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the statistical design (Note: the symbol before 'group' is a tilde, ~ )\ndesign(dds) <- ~ group\n```\n:::\n\n\n\n\nNow we're ready to run the DE analysis!\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Running the DE analysis\n\nWhile we had to do a lot of prep to get to this stage,\nactually running the DE analysis is very simple:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run the DE analysis\n# (We are assigning the output back to the same `dds` object - the DE results are added to it)\ndds <- DESeq(dds)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nestimating size factors\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nestimating dispersions\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\ngene-wise dispersion estimates\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nmean-dispersion relationship\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfinal dispersion estimates\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfitting model and testing\n```\n\n\n:::\n:::\n\n\n\n\nThe `DESeq()` function is a wrapper that performs three steps (functions) consecutively:\n\n- `estimateSizeFactors()` --- \"Normalization\" by library size and composition.\n- `estimateDispersions()` --- Estimate gene-wise dispersion (variance in counts).\n- `nbinomWaldTest(ddsObj)` --- Fit the negative binomial GLM and calculate test statistics\n\nA key thing to understand is that above, DESeq2 automatically performed **pairwise**\ncomparisons between **each of the (6) levels** of the `group` variable. This means that\nfor any individual gene, it tested whether the gene is differentially expressed\n*separately for each of these pairwise comparisons*.\n\n<br>\n\n## Extracting the DE results\n\nDESeq2 stores the results as a separate table for each pairwise comparison,\nand now, we'll extract one of these.\n\n### The results table\n\nWe can extract the results for one pairwise comparison (which DESeq2 refers to as a\n**contrast**) at a time, by specifying it with the `contrast` argument as a vector of\nlength 3:\n\n1.  The focal independent variable (here, `group`)\n2.  The first (reference) level of the independent variable (in the example below,\n    `relictum_24hpi`)\n3.  The second level of the independent variable (in the example below, `control_24hpi`)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the DE results for one pairwise comparison\nfocal_contrast <- c(\"group\", \"relictum_24hpi\", \"control_24hpi\")\nres_rc24 <- results(dds, contrast = focal_contrast)\n\nhead(res_rc24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\nlog2 fold change (MLE): group relictum_24hpi vs control_24hpi \nWald test p-value: group relictum_24hpi vs control_24hpi \nDataFrame with 6 rows and 6 columns\n       baseMean log2FoldChange     lfcSE      stat    pvalue      padj\n      <numeric>      <numeric> <numeric> <numeric> <numeric> <numeric>\nATP6  7658.0445      -0.416305  0.609133 -0.683438 0.4943300  0.776172\nATP8     4.9196      -1.311116  1.388811 -0.944057 0.3451406        NA\nCOX1 75166.8670      -0.590935  0.282075 -2.094958 0.0361747  0.208045\nCOX2  7807.1848      -0.610152  0.578401 -1.054893 0.2914743  0.615249\nCOX3 41037.7359      -0.400173  0.251760 -1.589498 0.1119479  0.388880\nCYTB 36916.6130      -0.501653  0.261927 -1.915242 0.0554617  0.266528\n```\n\n\n:::\n:::\n\n\n\n\nWhat do the columns in this table contain?\n\n-   **`baseMean`**: Mean expression level across all samples.\n-   **`log2FoldChange`**: The \"log2-fold change\" of gene counts between the compared\n    levels.\n-   **`lfcSE`**: The uncertainty in terms of the standard error (SE) of the log2-fold\n    change estimate.\n-   **`stat`**: The value for the Wald test's test statistic.\n-   **`pvalue`**: The *uncorrected* p-value from the Wald test.\n-   **`padj`**: The multiple-testing corrected p-value (i.e., adjusted p-value).\n\n::: callout-tip\n#### Multiple testing correction\n\nBecause we are testing significance for *many* genes, we need to correct for multiple\ntesting. DESeq2 uses the Benjamini-Hochberg False Discovery Rate (FDR) correction. For\nmore info, see this [StatQuest video](https://www.youtube.com/watch?v=K8LQSvtjcEo).\n:::\n\n::: callout-note\n#### Log2-fold changes (LFCs)\n\nIn RNA-seq, log2-fold changes (LFCs) are the standard way of representing the **magnitude\n(*effect size*) of expression level differences** between two groups of interest. With A\nand B being the compared sample groups, the LFC is calculated as:\n\n``` bash-out-solo\nlog2(mean of A / mean of B)\n```\n\nDue the log-transformation, the LFC also increase more slowly than a raw fold-change:\n\n-   An LFC of **`1`** indicates a 2-fold difference\n-   An LFC of **`2`** indicates a 4-fold difference\n-   An LFC of **`3`** indicates a 8-fold difference\n\nA nice property of LFC is that decreases and increases in expression are expressed\nsymmetrically:\n\n-   An LFC of **`1`** means that group A has a **two-fold higher** expression that group B\n-   An LFC of **`-1`** means that group A has a **two-fold lower** expression that group B\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise: Log-fold changes\n\nBased on the above, or your knowledge of log-transformations,\nwhat do you expect the following to return:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In the context of a LFC, these 2 numbers would be mean expression levels in 2 groups\nlog2(8 / 2)\nlog2(2 / 8)\n```\n:::\n\n\n\n\n<details><summary>*Click to see the solution*</summary>\n\n-   A fold-change of 4 (8/2) is a LFC of 2:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog2(8 / 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n-   A fold-change of 0.25 (2/8) is a LFC of -2:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog2(2 / 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] -2\n```\n\n\n:::\n:::\n\n\n\n\n</details>\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Numbers of Differentially Expressed Genes (DEGs)\n\nHow many adjusted p-values were less than 0.05 (i.e., significant)?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# (We need 'na.rm = TRUE' because some p-values are 'NA')\n# (If we don't remove NAs from the calculation, sum() will just return NA)\nsum(res_rc24$padj < 0.05, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 801\n```\n\n\n:::\n:::\n\n\n\n\nSo, we have 801 Differentially Expressed Genes\n(**DEG**s) for this specific pairwise comparison.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Exercise: DEGs\n\nThe paper's Table 1 (which we saw above) reports the number of DEGs for a variety of\ncomparisons.\n\n- How does the number of DEGs we just got compare to what they found in the paper for\n  this comparison?\n\n- The table also reports numbers of **up- and downregulated genes separately**. Can you\n  find this out for our DEGs?\n\n<details><summary>*Click to see the solution*</summary>\n\n- **Solution using tidyverse/dplyr:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First we need to convert the results table into a regular data frame\nas.data.frame(res_rc24) |>\n  # Then we only select the rows/genes that are significant\n  filter(padj < 0.05) |>\n  # If we run count() on a logical test, we get the nrs. that are FALSE v. TRUE\n  dplyr::count(log2FoldChange > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n  log2FoldChange > 0   n\n1              FALSE 616\n2               TRUE 185\n```\n\n\n:::\n:::\n\n\n\n\n- **Solution using base R:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Down-regulated (relictum < control):\nsum(res_rc24$log2FoldChange < 0 & res_rc24$padj < 0.05, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 616\n```\n\n\n:::\n\n```{.r .cell-code}\n# Up-regulated (relictum > control):\nsum(res_rc24$log2FoldChange > 0 & res_rc24$padj < 0.05, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 185\n```\n\n\n:::\n:::\n\n\n\n\n</details>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n------------------------------------------------------------------------------------------\n\n- *Bonus*: The table also reports the number of DEGs with an **absolute LFC \\> 1**.\n  Can you find this out for our DEGs?\n\n<details><summary>*Click to see the solution*</summary>\n\n- **Solution using tidyverse/dplyr:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First we need to convert the results table into a regular data frame\nas.data.frame(res_rc24) |>\n  # Then we only select the rows/genes that are significant\n  filter(padj < 0.05, abs(log2FoldChange) > 1) |>\n  # If we run count() on a logical test, we get the nrs. that are FALSE v. TRUE\n  dplyr::count(log2FoldChange > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n  log2FoldChange > 0   n\n1              FALSE 159\n2               TRUE  49\n```\n\n\n:::\n:::\n\n\n\n\n- **Solution using base R:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Down-regulated (relictum < control):\nsum(res_rc24$log2FoldChange < -1 & res_rc24$padj < 0.05, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 159\n```\n\n\n:::\n\n```{.r .cell-code}\n# Up-regulated (relictum > control):\nsum(res_rc24$log2FoldChange > 1 & res_rc24$padj < 0.05, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 49\n```\n\n\n:::\n:::\n\n\n\n\n</details>\n\n- *Bonus*: Extract the results for one or more **other contrasts** in the table,\n  and compare the results.\n:::\n\n<br>\n\n## Visualizing the DE results\n\nTo practice with visualization of the differential expression results,\nwe will create a few plots for the results for the `relictum_24hpi` vs. `control_24hpi`\ncomparison, which we extracted above.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Volcano plot\n\nFor a nice overview of the results, we can create a so-called \"volcano plot\" using the\n`EnhancedVolcano()` function from the package of the same name\n([see here for a \"vignette\"/tutorial](https://bioconductor.org/packages/release/bioc/vignettes/EnhancedVolcano/inst/doc/EnhancedVolcano.html)):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEnhancedVolcano(\n  toptable = res_rc24,      # DESeq2 results to plot   \n  title = \"relictum vs. control at 24 hpi\",\n  x = \"log2FoldChange\",     # Plot the log2-fold change along the x-axis\n  y = \"padj\",               # Plot the p-value along the y-axis\n  lab = rownames(res_rc24), # Use the rownames for the gene labels (though see below)\n  labSize = 0               # Omit gene labels for now\n  )\n```\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-44-1.png){width=85%}\n:::\n:::\n\n\n\n\n::: exercise\n#### {{< fa user-edit >}} Bonus exercise: Volcano plots\n\nThe `EnhancedVolcano()` function by default adds gene IDs to highly significant genes,\nbut above, we turned off gene name labeling by setting `labSize = 0`.\nI did this because the\ndefault p-value cut-off for point labeling is `1e-5` and in this case, that would make the\nplot quite busy with gene labels. We might want to try a plot with a stricter p-value\ncut-off that does show the gene labels.\n\n- **Play around with the p-value cut-off and the labeling to create a plot you like.**\\\n  *Check [the vignette](https://bioconductor.org/packages/release/bioc/vignettes/EnhancedVolcano/inst/doc/EnhancedVolcano.html),*\n  *or the help page (accessed by running `?EnhancedVolcano`) to see how you can do this.*\n\n<details><summary>*Click for an example*</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEnhancedVolcano(\n  toptable = res_rc24,      \n  title = \"relictum vs. control at 24 hpi\",\n  x = \"log2FoldChange\",     \n  y = \"padj\",             \n  lab = rownames(res_rc24), \n  labSize = 4,               # Now we will show the gene labels\n  pCutoff = 10e-10,          # Modify the p-value cut-off\n  subtitle = NULL,           # I'll also remove the silly subtitle\n  caption = NULL,            # ... and the caption\n  )\n```\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-45-1.png){width=85%}\n:::\n:::\n\n\n\n\n</details>\n\n- **Figure out the identity of the above-mentioned log2-fold change outlier.**\\\n  *(You can do so either by labeling it in the plot, or by filtering the `res_rc24` table.)*\n\n<details><summary>*Click for the solution for how to lab it in the plot*</summary>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEnhancedVolcano(\n  toptable = res_rc24,      \n  title = \"relictum vs. control at 24 hpi\",\n  x = \"log2FoldChange\",     \n  y = \"padj\",             \n  lab = rownames(res_rc24), \n  labSize = 4,               \n  pCutoff = 0.05,            # Modify the p-value cut-off\n  FCcutoff = 20,             # Modify the LFC cut-off\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_vline()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-46-1.png){width=85%}\n:::\n:::\n\n\n\n</details>\n\n<details><summary>*Click for the solution for how to find it in the results table*</summary>\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(res_rc24) |> filter(log2FoldChange > 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n              baseMean log2FoldChange    lfcSE     stat       pvalue\nLOC120413430  7.540043       24.46898 5.397990 4.532979           NA\nLOC120431476 39.720375       23.01445 5.301369 4.341228 1.416886e-05\n                     padj\nLOC120413430           NA\nLOC120431476 0.0008584398\n```\n\n\n:::\n:::\n\n\n\n\n(Interestingly, there's a second gene with a LFC \\> 20 that we hadn't seen in the plot,\nbecause it has `NA` as the `pvalue` and `padj`. See the\n[section \"Extra info: `NA` values in the results table\" in the Appendix](#na-values-in-the-deseq2-results-table) \nfor why p-values can be set to `NA`.)\n\n</details>\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Plot specific genes\n\nWe can also create plots of expression levels for individual genes. That is especially\ninteresting for genes with highly significant differential expression. So let's plot the\nmost highly significant DEG.\n\nFirst, let's create a vector with most highly significant DEGs, which we'll use again for\nthe heatmap below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop25_DE <- row.names(res_rc24[order(res_rc24$padj)[1:25], ])\n\ntop25_DE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n [1] \"LOC120423768\" \"LOC120423767\" \"LOC120414587\" \"LOC128092307\" \"LOC120431154\"\n [6] \"LOC120427827\" \"LOC120415152\" \"LOC120422735\" \"LOC120431739\" \"LOC120431733\"\n[11] \"LOC120428214\" \"LOC120427588\" \"LOC120415540\" \"LOC120415522\" \"LOC120429000\"\n[16] \"LOC120414889\" \"LOC120413491\" \"LOC120414802\" \"LOC120423826\" \"LOC120429211\"\n[21] \"LOC120425480\" \"LOC120431003\" \"LOC120421894\" \"LOC120423819\" \"LOC128093166\"\n```\n\n\n:::\n:::\n\n\n\n\nDESeq2 has a plotting function but the plot is not very good. We will still use that\nfunction but just to quickly extract the counts for our gene of interest in the right\nformat for plotting, using `returnData = TRUE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfocal_gene_counts <- plotCounts(\n  dds,\n  gene = top25_DE[1],\n  intgroup = c(\"time\", \"treatment\"),\n  returnData = TRUE\n  )\n\nhead(focal_gene_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n                 count  time   treatment\nERR10802863 1543.81532 24hpi     control\nERR10802864 2279.03704 24hpi cathemerium\nERR10802865   25.42295 24hpi    relictum\nERR10802866 1105.75009 24hpi     control\nERR10802867 1199.28425 24hpi cathemerium\nERR10802868   32.14394 24hpi    relictum\n```\n\n\n:::\n:::\n\n\n\n\nNow, we can make the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(focal_gene_counts,\n       # Treatment along the x-axis, gene counts along the y, color by treatment:\n       aes(x = treatment, y = count, fill = treatment)) +\n  # Plot separate \"facets\" with the different time points\n  facet_wrap(vars(time)) +\n  # Add a boxplot with a partly transparent (alpha) color:\n  geom_boxplot(alpha = 0.5, outlier.shape = NA) +\n  # _And_ add individual points:\n  geom_point(size = 4, shape = 21,\n             position = position_jitter(w = 0.1, h = 0)) +\n  # Plot styling (e.g., we don't need a legend)\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-51-1.png){width=85%}\n:::\n:::\n\n\n\n\n::: exercise\n#### {{< fa user-edit >}} Exercise: Single-gene plots\n\n- Plot one or a few more of the top-DE genes.\n  Do they have similar expression patterns across treatment and time points as the first one?\n\n------------------------------------------------------------------------------------------\n\n- *Bonus*: Plot the gene with the very high LFC value that we saw when making the volcano plot.\n  How would you interpret this?\n\n<details><summary>*Click for the solution*</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfocal_gene_counts <- plotCounts(\n  dds,\n  gene = \"LOC120431476\",\n  intgroup = c(\"time\", \"treatment\"),\n  returnData = TRUE\n  )\n\nggplot(focal_gene_counts, aes(x = treatment, y = count, fill = treatment)) +\n  geom_boxplot(alpha = 0.5, outlier.shape = NA) +\n  geom_point(size = 4, shape = 21, position = position_jitter(w = 0.1, h = 0)) +\n  facet_wrap(vars(time)) +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-52-1.png){width=85%}\n:::\n:::\n\n\n\n\nWow! It looks like in every single time + treatment combinations, all but one (or in one\ncase, two) of the samples have zero expression, but there are several extreme outliers.\n\nOur focal comparison at `24hpi` (left panel/facet), and comparing `control` vs `relictum`:\nso it looks like the difference between these two groups is solely due to the one outlier\nin `relictum`. Nevertheless, even the multiple-testing corrected p-value (`padj`) is\nsignificant for this gene:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.data.frame(res_rc24) |>\n  rownames_to_column(\"gene\") |>\n  filter(gene == \"LOC120431476\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n          gene baseMean log2FoldChange    lfcSE     stat       pvalue\n1 LOC120431476 39.72038       23.01445 5.301369 4.341228 1.416886e-05\n          padj\n1 0.0008584398\n```\n\n\n:::\n:::\n\n\n\n\nSo, we have to be careful with talking our statistical results at face value, and need to\nvisualize important genes!\n\n</details>\n\n::: callout-important\n#### Outliers!\nYou may want to check out the solution to the previous exercise, even if you don't get\naround to doing it yourself.\n:::\n:::\n\n<br>\n\n## In Closing\n\nToday, you have performed several steps in the analysis of gene counts that result from a\ntypical RNA-seq workflow. Specifically, you have:\n\n- Created a DESEq2 object from the gene count data and the experiment's metadata\n- Performed exploratory data analysis including a PCA\n- Ran a Differential Expression (DE) analysis with DESeq2\n- Extracted, interpreted, and visualized the DE results\n\n#### Next steps\n\nTypical next steps in such an analysis include:\n\n- Extracting, comparing, and synthesizing DE results across **all pairwise comparisons**\n  (this would for example allow us to make the upset plot in *Figure 2 of the paper*)\n\n- **Functional enrichment analysis** with Gene Ontology (GO) terms,\n   as done in the paper, and/or with KEGG pathways and other functional gene grouping systems.\n\n<br>\n\n## Appendix\n\n### Heatmaps\n\nRather than plotting expression levels for many individual genes,\nwe can create \"heatmap\" plots to plot dozens (possibly even hundreds) of genes at once.\n\nWe will create heatmaps with the `pheatmap` function,\nand let's make a heatmap for the top-25 most highly significant DEGs for our focal contrast.\n\nUnlike with some of the functions we used before,\nwe unfortunately can't directly use our DESeq2 object,\nbut we have to extract and subset the count matrix,\nand also pass the metadata to the heatmap function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We need a normalized count matrix, like for the PCA\n# We can simply extract the matrix from the normalized dds object we created for the PCA\nnorm_mat <- assay(dds_vst)\n\n# In the normalized count matrix, select only the genes of interest\n# We'll reuse the 'top25_DE' vector that we created for the individual gene plots\nnorm_mat_sel <- norm_mat[match(top25_DE, rownames(norm_mat)), ]\n\n# Sort the metadata\nmeta_sort <- meta |>\n  arrange(treatment, time) |>\n  select(treatment, time)\n```\n:::\n\n\n\n\nNow we can create the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npheatmap(\n  norm_mat_sel,\n  annotation_col = meta_sort,  # Add the metadata\n  cluster_cols = FALSE,        # Don't cluster samples (=columns, cols)\n  show_rownames = FALSE,       # Don't show gene names\n  scale = \"row\",               # Perform z-scaling for each gene\n  )\n```\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-55-1.png){width=85%}\n:::\n:::\n\n\n\n\nNotes on the code and plot above:\n\n- The z-scaling with `scale =` will make sure we can compare genes with very different\n  expression levels: after all, we're interested in relative expression levels across\n  samples/sample groups.\n\n- `pheatmap` will by default perform hierarchical clustering both at the sample (`col`)\n  and gene (`row`) level, such that more similar samples and genes will appear closer to\n  each other.\n  Above, we turned clustering off for samples, since we want to keep them in their by-group order.\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n::: exercise\n#### {{< fa user-edit >}} Bonus exercise: heatmaps\n\nMake a heatmap with the top-25 **most-highly expressed** genes\n(i.e., genes with the highest mean expression levels across all samples).\n\n<details><summary>*Click for a hint: how to get that top-25*</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop25_hi <- names(sort(rowMeans(norm_mat), decreasing = TRUE)[1:25])\n```\n:::\n\n\n\n</details>\n\n<details><summary>*Click for the solution*</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# In the normalized count matrix, select only the genes of interest\nnorm_mat_sel <- norm_mat[match(top25_hi, rownames(norm_mat)), ]\n\n# Sort the metadata\nmeta_sort <- meta |>\n  arrange(treatment, time) |>\n  select(treatment, time)\n\n# Create the heatmap\npheatmap(\n  norm_mat_sel,\n  annotation_col = meta_sort,\n  cluster_cols = FALSE,\n  show_rownames = FALSE,\n  scale = \"row\"\n  )\n```\n\n::: {.cell-output-display}\n![](03_DE_files/figure-html/unnamed-chunk-57-1.png){width=85%}\n:::\n:::\n\n\n\n</details>\n:::\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### `NA` values in the DESeq2 results table\n\nSome values in the DESeq2 results table can be set to `NA` for one of the following reasons:\n\n- If a gene contains a sample with a count **outlier**,\n  both the p-value and adjusted p-value will be set to `NA`.\n  (DESeq2 performs outlier detection using Cook's distance.)\n\n- If all samples have **zero counts** for a given gene,\n  the `baseMean` column will be zero, and the log2-fold change estimates,\n  p-value and adjusted p-value will all be set to `NA`.\n\n- DESeq2 also automatically filters genes with a **low mean count** in the sense that it\n  does not include them in the multiple testing correction.\n  Therefore, in such cases, the p-value will not be `NA`, but the *adjusted* p-value will be.\n\n  Because we have very low power to detect differential expression for such low-count\n  genes, it is beneficial to remove them prior to the multiple testing correction: that\n  way, the correction becomes less severe for the remaining genes.\n\nLet's see how many genes have `NA` p-values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of genes with NA p-value:\nsum(is.na(res_rc24$pvalue))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 1124\n```\n\n\n:::\n\n```{.r .cell-code}\n# As a proportion of the total number of genes in the test:\nsum(is.na(res_rc24$pvalue)) / nrow(res_rc24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 0.05961283\n```\n\n\n:::\n:::\n\n\n\n\nAnd `NA` adjusted p-values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of genes with NA p-value:\nsum(is.na(res_rc24$padj))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 7283\n```\n\n\n:::\n\n```{.r .cell-code}\n# As a proportion of the total number of genes in the test:\nsum(is.na(res_rc24$padj)) / nrow(res_rc24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` styled-output\n[1] 0.3862636\n```\n\n\n:::\n:::\n\n\n\n\n<hr style=\"height:1pt; visibility:hidden;\" />\n\n### Exporting the results\n\nTo save the DE results tables, you can for example use the `write_tsv()` function.\nYou could open the resulting file in Excel for further exploration.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the output directory, if necessary:\ndir.create(\"results/DE\", recursive = TRUE, showWarnings = FALSE)\n\n# Write the \nwrite_tsv(as.data.frame(res_rc24), \"results/DE/resultsres_rc24.tsv\")\n```\n:::\n\n\n\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}