{
  "hash": "115c660e686671ecf9bbfddc277fc2dc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reference genome files\"\nsubtitle: \"Downloading & exploring FASTA and GTF files in the shell, <br> including with `grep`, `cut`, `sort`, and `uniq`\"\npagetitle: \"Genomic data files\"\nhighlight-style: github\nnumber-sections: true\nengine: knitr\nauthor: Jelmer Poelstra\ndate: 2023-08-11\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n-------\n\n<br>\n\n## Overview & setting up {-}\n\nIn this session,\nwe'll talk about the two main types of reference genome files that you need\nin a reference-based RNAseq analysis\n(and other reference-genome based genomics analysis like variant calling):\nFASTA and GTF/GFF.\n\n- **FASTA** files:\n  Simple sequence files,\n  where each entry contains just a header and a DNA or protein sequence.\n  Your reference genome assembly will be in this format.\n- **GTF** (& **GFF**) files:\n  These contain annotations in a tabular format,\n  e.g. the start & stop position of each gene.\n\nWe will download these files from the internet using `wget`,\nand will also see a few new shell commands that can be used to summarize tabular\ndata like that in GTF files: `cut`, `sort`, and `uniq` (in combination with `grep`).\n\n#### Start VS Code and open your folder {-}\n\nAs always, we'll be working in VS Code &mdash;\nif you don't already have a session open, see below how to do so.\n\n**Make sure to open your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir**,\neither by using the `Open Folder` menu item,\nor by clicking on this dir when it appears in the `Welcome` tab.\n\n:::{.callout-tip collapse=\"true\"}\n## Starting VS Code at OSC - with a Terminal (Click to expand)\n1. Log in to OSC's OnDemand portal at <https://ondemand.osc.edu>.\n\n2. In the blue top bar, select `Interactive Apps`\n   and then near the bottom of the dropdown menu, click `Code Server`.\n\n3. In the form that appears on a new page:\n   - Select an appropriate OSC project (here: `PAS0471`)\n   - For this session, select `/fs/ess/PAS0471` as the starting directory\n   - Make sure that `Number of hours` is at least `2`\n   - Click `Launch`.\n\n4. On the next page, once the top bar of the box has turned green\n   and says `Runnning`, click `Connect to VS Code`.\n\n<figure><p align=\"center\"><img src=img/osc-code-launch_ed.png width=\"80%\"></p></figure>\n\n5. Open a Terminal by clicking\n   &nbsp; {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.\n   (Or use one of the keyboard shortcuts:\n   <kbd>Ctrl</kbd>+<kbd>\\`</kbd> (backtick) or\n   <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>.)\n\n6. In the `Welcome` tab under `Recent`,\n   you should see your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir listed:\n   click on that to open it.\n   Alternatively, use\n   &nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`\n   to open that dir in VS Code.\n:::\n\n:::{.callout-warning collapse=\"true\"}\n#### Don't have your own dir with the data? (Click to expand)\nIf you missed the last session, or deleted your `rnaseq_intro` dir entirely,\nrun these commands to get a (fresh) copy of all files:\n\n```bash\nmkdir -p /fs/ess/PAS0471/$USER/rnaseq_intro\ncp -r /fs/ess/PAS0471/demo/202307_rnaseq /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nAnd if you do have an `rnaseq_intro` dir,\nbut you want to start over because you moved or removed some of the files\nwhile practicing, then delete the dir before your run the commands above:\n\n```bash\nrm -r /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nYou should have at least the following files in this dir:\n\n```{.bash-out}\n/fs/ess/PAS0471/demo/202307_rnaseq\n├── data\n│   └── fastq\n│       ├── ASPC1_A178V_R1.fastq.gz\n│       ├── ASPC1_A178V_R2.fastq.gz\n│       ├── ASPC1_G31V_R1.fastq.gz\n│       ├── ASPC1_G31V_R2.fastq.gz\n│       ├── Miapaca2_A178V_R1.fastq.gz\n│       ├── Miapaca2_A178V_R2.fastq.gz\n│       ├── Miapaca2_G31V_R1.fastq.gz\n│       └── Miapaca2_G31V_R2.fastq.gz\n├── metadata\n│   └── meta.tsv\n└── README.md\n```\n\n:::\n\n<br>\n\n## Downloading reference genome files\n\n### Finding genome files at NCBI\n\nTo analyze our RNAseq data,\nwe'll need two files related to our **reference genome**.\nThis is the genome that we will align our reads to,\nand whose gene annotations will form the basis of the gene counts we'll\neventually get.\n\nSpecifically,\nwe'll need the **nucleotide FASTA** file with the genome assembly itself,\nand a **GTF file**,\nwhich is a tabular file with the genomic coordinates and other information for genes\nand other so-called genomic \"features\".\n\nWe can download these files from NCBI.\nFor human, many genome assemblies are available on NCBI,\nbut the current reference genome is \"_GRCh38.p14_\" \n([see this overview](https://www.ncbi.nlm.nih.gov/datasets/genome/?taxon=9606)).\nThere are several ways to download genomes from the NCBI &mdash;\nhere, we will keep it simple and directly download just the two files that we\nneed from the\n[NCBI FTP site for this genome](https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/).\n\n::: {.callout-note}\n#### Getting to the FTP site\nYou can get to this FTP site by clicking on the link for \"GRCh38.p14\" on the\n[overview page](https://www.ncbi.nlm.nih.gov/datasets/genome/?taxon=9606),\nwhich will bring you [here](https://www.ncbi.nlm.nih.gov/datasets/genome/GCF_000001405.40/),\nthen clicking on \"View the legacy Assembly page\",\nwhich will bring you [here](https://www.ncbi.nlm.nih.gov/assembly/GCF_000001405.40/?shouldredirect=false),\nand then clicking on \"FTP directory for RefSeq assembly\" on the right-hand side\nof the page.\n:::\n\nOn the [FTP site](https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/),\nright-click on  `GCF_000001405.40_GRCh38.p14_genomic.fna.gz`\nand then click \"_Copy link address_\"\n(the URL to this file is also shown in the command box below).\n\n<br>\n\n### Downloading files to OSC with `wget`\n\nTo download a file to OSC,\nyou can't just open a web browser and download it there directly.\nYou _could_ download it to your own computer and then transfer it to OSC.\nA more direct approach is to use a download command in your OSC shell.\n**`wget` is one command that allows you to download files from the web**[^4].\n\n[^4]: `curl` is another very commonly used one, with much the same functionality.\n\nTo download a file to your working directory,\nyou just need to tell `wget` about the URL (web address) to that file &mdash;\ntype \"wget\", press <kbd>Space</kbd>, and paste the address you copied:\n\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.fna.gz\n```\n:::\n\n\n\n```{.bash-out}\n--2023-08-08 13:46:35--  https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.fna.gz\nResolving ftp.ncbi.nlm.nih.gov (ftp.ncbi.nlm.nih.gov)... 130.14.250.11, 130.14.250.10, 2607:f220:41e:250::12, ...\nConnecting to ftp.ncbi.nlm.nih.gov (ftp.ncbi.nlm.nih.gov)|130.14.250.11|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 972898531 (928M) [application/x-gzip]\nSaving to: ‘GCF_000001405.40_GRCh38.p14_genomic.fna.gz’\n65% [============================================================================================>                                                   ] 633,806,848 97.7MB/s \n```\n\nThe `wget` command is quite chatty, as you can see above,\nand its output to the screen includes a progress bar for the download.\n\nNext, let's download one of the **annotation files**.\nOn the NCBI genome assembly FTP page, both a GFF and a GTF file are available.\nThese are two very similar formats that contain the same data.\nFor our specific analysis workflow, the GTF format is preferred,\nso we will download the GTF file &mdash;\nright-click on `GCF_000001405.40_GRCh38.p14_genomic.gtf.gz`\nand copy the link address.\n\n```bash\nwget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\n# (Command output not shown)\n```\n\nNext, let's see if the files are indeed in our current working dir:\n\n```bash\nls -lh \n```\n```{.bash-out}\n# (Output should include:)\n-rw-r--r-- 1 jelmer PAS0471 928M Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.fna.gz\n-rw-r--r-- 1 jelmer PAS0471  49M Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\n```\n\n<br>\n\n### Uncompressing and renaming the genome files\n\nBoth the FASTA and the GTF file are gzip-compressed.\nWhile it's preferable to keep FASTQ files compressed (as mentioned above),\nit's often more convenient to store your reference genome files as uncompressed\nfiles[^5].\n\n[^5]: This is because reference genome files don't take up as much space,\n      and bioinformatics tools may expect them to be uncompressed.\n\nWe can uncompress/unzip these files with the `gunzip` (\"g-unzip\") command\nas follows\n(and notice the subsequent increase in file size in the `ls` output):\n\n```bash\n# Will take several seconds, esp. for the first file, and not print output to screen\ngunzip GCF_000001405.40_GRCh38.p14_genomic.fna.gz\ngunzip GCF_000001405.40_GRCh38.p14_genomic.gtf.gz\n\nls -lh\n```\n```{.bash-out}\n# (Output should include:)\n-rw-r--r-- 1 jelmer PAS0471 3.2G Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.fna\n-rw-r--r-- 1 jelmer PAS0471 1.6G Mar 21 10:15 GCF_000001405.40_GRCh38.p14_genomic.gtf\n```\n\nWe'll also want to move these files to a dedicated directory.\nAlso,\nit will be convenient for our purposes to shorten their file names while\nretaining the necessary identifying information (the \"GCF_\" RefSeq number).\n\nAfter creating a directory, we can move and rename the files at once as follows:\n\n```bash\n# We'll use a dir 'data/ref' for reference genome files\nmkdir -p data/ref\n\nmv -v GCF_000001405.40_GRCh38.p14_genomic.fna data/ref/GCF_000001405.40.fna\nmv -v GCF_000001405.40_GRCh38.p14_genomic.gtf data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n‘GCF_000001405.40_GRCh38.p14_genomic.fna’ -> ‘data/ref/GCF_000001405.40.fna’\n‘GCF_000001405.40_GRCh38.p14_genomic.gtf’ -> ‘data/ref/GCF_000001405.40.gtf’\n```\n\n<br>\n\n## FASTA\n\nOur reference genome assembly is stored in the FASTA format,\nso we'll learn more about this format and take a look at our own file.\n\n### The FASTA format\n\nThe FASTA format is in essence simpler than FASTQ,\nbut it is also less standardized and more generic.\n\nThe following example FASTA file contains two entries:\n\n```{.bash-out-solo}\n>unique_sequence_ID Optional description (free form!)\nATTCATTAAAGCAGTTTATTGGCTTAATGTACATCAGTGAAATCATAAATGCTAAAAA\n>unique_sequence_ID2\nATTCATTAAAGCAGTTTATTGGCTTAATGTACATCAGTGAAATCATAAATGCTAAATG\n```\n\nLike FASTQ files, each entry contains a **header** and the **sequence** itself, but:\n\n- **Header lines start with a `>`** and are otherwise basically \"free form\",\n  but they usually provide some sort of identifier (and sometimes some metadata)\n  for the sequence in the entry. \n- There are no quality scores, and there is no `+` line.\n- The sequences can be DNA, RNA, or amino acids.\n- A FASTA entry can represent a number of different types of sequencs,\n  such as a read, a contig/scaffold, a chromosome, or a gene,\n  as well as an _aligned_ sequence with gaps in it. \n- Because the individual sequences in a FASTA file can be very long,\n  **sequences are often not on a single line**,\n  but may be spread across multiple/many lines with some fixed width,\n  say 50 or 80 characters. (As such, line counts are not that informative!)\n\n_Generic_ FASTA file **extensions** are `.fasta` and `.fa`,\nbut also used are extensions that explicitly indicate whether the sequences are\n_nucleotides_ (`.fna`, like our downloaded genome assembly file)\nor _amino acids_ (`.faa`).\n\n<br>\n\n### Exploring our FASTA file\n \nLet's take a look at the first lines of our reference genome FASTA:\n\n```bash\nhead data/ref/GCF_000001405.40.fna\n```\n```{.bash-out}\n>NC_000001.11 Homo sapiens chromosome 1, GRCh38.p14 Primary Assembly\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n```\n\nWell ... apparently not all bases have been determined:\nas you probably know, an `N` represents an unknown base.\nWe can also see that the sequence for each entry is spread across multiple lines,\nwith a line width of 80 characters:\n\n```bash\n# 'head -n 2 | tail -n 1' prints the second line; 'wc -c' counts characters\nhead -n 2 data/ref/GCF_000001405.40.fna | tail -n 1 | wc -c\n```\n```{.bash-out}\n81              # 81 - 1 = 80 characters\n```\n\nLet's take a more extensive look at the file with `less`:\n\n```bash\nless data/ref/GCF_000001405.40.fna\n# (Remember: press 'q' to quit less)\n```\n\n-----\n\nWe can also look at all or some of the entry headers by `grep`ing for `>`\n(which is only allowed in the header) &mdash;\nin this file, we can see that the entries represent the scaffolds:\n\n```bash\ngrep \">\" data/ref/GCF_000001405.40.fna | head\n```\n```{.bash-out}\n>NC_000001.11 Homo sapiens chromosome 1, GRCh38.p14 Primary Assembly\n>NT_187361.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG1_UNLOCALIZED\n>NT_187362.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG2_UNLOCALIZED\n>NT_187363.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG3_UNLOCALIZED\n>NT_187364.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG4_UNLOCALIZED\n>NT_187365.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG5_UNLOCALIZED\n>NT_187366.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG6_UNLOCALIZED\n>NT_187367.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG7_UNLOCALIZED\n>NT_187368.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG8_UNLOCALIZED\n>NT_187369.1 Homo sapiens chromosome 1 unlocalized genomic scaffold, GRCh38.p14 Primary Assembly HSCHR1_CTG9_UNLOCALIZED\n```\n\nFinally, let's count the number of scaffolds\nsimply by counting the number of lines with a `>`:\n\n```bash\n# (This will take several seconds)\ngrep -c \">\" data/ref/GCF_000001405.40.fna\n```\n```{.bash-out}\n705\n```\n\nDoes this match with what the NCBI website told us?\n\n<br>\n\n## Annotation files (GTF/GFF)\n\nOur reference genome _annotation_ is stored in the GTF format,\nso we'll learn about this format, too, and take a look at our own file.\n\n### The GTF format\n\nThe GTF format and the very similar GFF format[^6] are **tabular** files,\nwith one row for each individual \"**genomic feature**\"\n(gene, exon, intron, etc.)\nthat has been annotated in the genome,\nand with columns that contain information like the genomic coordinates of the \nfeatures.\n\n[^6]: In fact, GTF is identical to GFF v2.\n      But the current GFF version is the slightly different GFF v3,\n      which sometimes has the extension `.gff3` to make that clear.\n\nSee the small sample below,\nwith an _added header line_ (not normally present) with column names for clarity:\n\n```{.bash-out-solo}\nseqname     source  feature start   end     score  strand  frame    attributes\nNC_000001   RefSeq  gene    11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"\"; db_xref \"GeneID:100287102\"; db_xref \"HGNC:HGNC:37102\"; description \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; gbkey \"Gene\"; gene \"DDX11L1\"; gene_biotype \"transcribed_pseudogene\"; pseudo \"true\"; \nNC_000001   RefSeq  exon    11874   12227   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; \n```\n\nHere are some more details on what's in each column,\nwith the more important/interesting columns in bold:\n\n- **_seqname_** &mdash; Name of the chromosome, scaffold, or contig\n- _source_ &mdash; Name of the program that generated this feature, or the data source (e.g. database)\n- **_feature_** &mdash; Name of the feature type, e.g. \"gene\", \"exon\", \"intron\", \"CDS\"\n- **_start_** &mdash; Start position of the feature (sequence numbering starts at 1; start position is included)\n- **_end_** &mdash; End position of the feature (end position is also included)\n- _score_ &mdash; A confidence score for the feature, often absent (in which case it is `.`)\n- **_strand_** &mdash; Whether the feature is on the `+` (forward) or `-` (reverse) strand\n- _frame_ &mdash; `0`, `1` or `2` (or `.` for no frame). `0` means the 1st base of the feature is the 1st base of a codon, etc.\n- **_attribute_** &mdash; A semicolon-separated list of tag-value pairs with additional information about each feature.\n\nAs we'll see below, GTF files also have a **header section**,\nwhose lines start with a `#` and contain some metadata for the file.\n\n::: {.callout-warning}\n#### Annotation and assembly versions\nBecause GTF/GFF files contain genomic coordinates,\nit is essential that the FASTA and GTF/GFF you are working with correspond\nto the same assembly.\nFor example, if you want to use an updated assembly FASTA for your focal genome,\nyou're going to need an updated annotation file as well.\n(On the other hand, it is possible to update just the annotation for the same\nassembly.)\n:::\n\n<br>\n\n### Exploring our GTF file\n\nLet's take a look at the first lines of the file with `head`,\nwhich shows us that there are five header lines,\nfollowed by the tabular part of the file:\n\n```bash\nhead data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n#gtf-version 2.2\n#!genome-build GRCh38.p14\n#!genome-build-accession NCBI_Assembly:GCF_000001405.40\n#!annotation-date 03/15/2023\n#!annotation-source NCBI RefSeq GCF_000001405.40-RS_2023_03\nNC_000001.11    BestRefSeq      gene    11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"\"; db_xref \"GeneID:100287102\"; db_xref \"HGNC:HGNC:37102\"; description \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; gbkey \"Gene\"; gene \"DDX11L1\"; gene_biotype \"transcribed_pseudogene\"; pseudo \"true\"; \nNC_000001.11    BestRefSeq      transcript      11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gbkey \"misc_RNA\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; \nNC_000001.11    BestRefSeq      exon    11874   12227   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"1\"; \nNC_000001.11    BestRefSeq      exon    12613   12721   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"2\"; \nNC_000001.11    BestRefSeq      exon    13221   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"3\"; \n```\n\nThe final column (\"attributes\") contains lots of data,\nso the line width will almost certainly exceed your screen width,\nand the output you see in your shell will be line-wrapped.\nIt's easier to see what's going on on this website\n(where we get one line for each line of the file, and can scroll sideways),\nor with `less -S`:\n\n```bash\nless -S data/ref/GCF_000001405.40.gtf\n```\n\n------\n\nOne nice trick for if we only want to only see the tabular lines\n(for some files, the header can be quite long),\nor if we want to summarize the data in the tabular lines,\nis to **omit the header lines using `grep -v`**.\nThe `-v` option will invert `grep`'s behavior and only print **non-matching** lines\n&mdash; since only the header lines contain a `#`,\nwe can use that as the pattern to search for: \n\n```bash\ngrep -v \"#\" data/ref/GCF_000001405.40.gtf | head -n 3\n```\n```{.bash-out}\nNC_000001.11    BestRefSeq      gene    11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"\"; db_xref \"GeneID:100287102\"; db_xref \"HGNC:HGNC:37102\"; description \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; gbkey \"Gene\"; gene \"DDX11L1\"; gene_biotype \"transcribed_pseudogene\"; pseudo \"true\"; \nNC_000001.11    BestRefSeq      transcript      11874   14409   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gbkey \"misc_RNA\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; \nNC_000001.11    BestRefSeq      exon    11874   12227   .       +       .       gene_id \"DDX11L1\"; transcript_id \"NR_046018.2\"; db_xref \"GeneID:100287102\"; gene \"DDX11L1\"; product \"DEAD/H-box helicase 11 like 1 (pseudogene)\"; pseudo \"true\"; transcript_biotype \"transcript\"; exon_number \"1\";\n```\n\nThis will also allow us to count the number of annotated features in the genome\n(4,684,284):\n\n```bash\ngrep -cv \"#\" data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n4684284\n```\n\n-----\n\nLet's see if we can find a gene of interest, \"RASD1\" in this annotation:\n\n```bash\ngrep \"RASD1\" data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\nNC_000017.11    BestRefSeq      gene    17494437        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"\"; db_xref \"GeneID:51655\"; db_xref \"HGNC:HGNC:15828\"; db_xref \"MIM:605550\"; description \"ras related dexamethasone induced 1\"; gbkey \"Gene\"; gene \"RASD1\"; gene_biotype \"protein_coding\"; gene_synonym \"AGS1\"; gene_synonym \"DEXRAS1\"; gene_synonym \"MGC:26290\"; \nNC_000017.11    BestRefSeq      transcript      17494437        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"GeneID:51655\"; gbkey \"mRNA\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 2\"; transcript_biotype \"mRNA\"; \nNC_000017.11    BestRefSeq      exon    17495896        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 2\"; transcript_biotype \"mRNA\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      exon    17494437        17495610        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 2\"; transcript_biotype \"mRNA\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      CDS     17495896        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      CDS     17495531        17495610        .       -       2       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      start_codon     17496179        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      stop_codon      17495528        17495530        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_001199989.2\"; db_xref \"CCDS:CCDS58519.1\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 2 is encoded by transcript variant 2\"; product \"dexamethasone-induced Ras-related protein 1 isoform 2\"; protein_id \"NP_001186918.1\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      transcript      17494437        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"Ensembl:ENST00000225688.4\"; db_xref \"GeneID:51655\"; gbkey \"mRNA\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 1\"; tag \"MANE Select\"; transcript_biotype \"mRNA\"; \nNC_000017.11    BestRefSeq      exon    17495896        17496395        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"Ensembl:ENST00000225688.4\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 1\"; tag \"MANE Select\"; transcript_biotype \"mRNA\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      exon    17494437        17495684        .       -       .       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"Ensembl:ENST00000225688.4\"; db_xref \"GeneID:51655\"; gene \"RASD1\"; product \"ras related dexamethasone induced 1, transcript variant 1\"; tag \"MANE Select\"; transcript_biotype \"mRNA\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      CDS     17495896        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      CDS     17495128        17495684        .       -       2       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"2\"; \nNC_000017.11    BestRefSeq      start_codon     17496179        17496181        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"1\"; \nNC_000017.11    BestRefSeq      stop_codon      17495125        17495127        .       -       0       gene_id \"RASD1\"; transcript_id \"NM_016084.5\"; db_xref \"CCDS:CCDS11185.1\"; db_xref \"Ensembl:ENSP00000225688.3\"; db_xref \"GeneID:51655\"; gbkey \"CDS\"; gene \"RASD1\"; note \"isoform 1 proprotein is encoded by transcript variant 1\"; product \"dexamethasone-induced Ras-related protein 1 isoform 1 proprotein\"; protein_id \"NP_057168.1\"; tag \"MANE Select\"; exon_number \"2\"; \n```\n\nThat worked!\nWe are getting quite a few lines, but these are all features for one single \ngene (there is only a single `gene` feature, in the first line).\n\n<br>\n\n## Summarizing tabular data with shell tools\n\n### Introduction to `cut`, `uniq`, and `sort`\n\nUsing more `grep` as well as a few new shell commands,\nwe can quickly get some useful information about the GTF file.\nLet's learn about `cut`, `sort`, and `uniq` using our metadata file,\nwhich has the following content:\n\n```bash\n# (Column -t is useful for displaying tabular files with columns aligned)\ncolumn -t metadata/meta.tsv \n```\n```{.bash-out}\nsample_id       cell_line  variant\nASPC1_A178V     ASPC1      A178V\nASPC1_A178V     ASPC1      A178V\nASPC1_G31V      ASPC1      G31V\nASPC1_G31V      ASPC1      G31V\nMiapaca2_A178V  Miapaca2   A178V\nMiapaca2_A178V  Miapaca2   A178V\nMiapaca2_G31V   Miapaca2   G31V\nMiapaca2_G31V   Miapaca2   G31V\n```\n\nFirst, **the `cut` command** can extract columns from tabular files,\nand you can use its `-f` option to specify the column(s) you want to extract\n&mdash; for example,\n`-f 3` extracts column 3, while `-f 3,5` would extract columns 3 and 5:\n\n```bash\ncut -f 3 metadata/meta.tsv\n```\n```{.bash-out}\nvariant\nA178V\nA178V\nG31V\nG31V\nA178V\nA178V\nG31V\nG31V\n```\n\nSecond, **the `sort` command** will sort its input:\n\n```bash\ncut -f 3 metadata/meta.tsv | sort\n```\n```{.bash-out}\nA178V\nA178V\nA178V\nA178V\nG31V\nG31V\nG31V\nG31V\nvariant\n```\n\n::: {.callout-note}\n### Other `sort` functionality\nWhile in the example below, we're sorting a single column,\n`sort` can also sort multi-column files on one or more columns,\n_while keeping the rows intact_.\nAdditionally, it can sort numerically, in reverse, and much more.\n:::\n\nHmmm... maybe it isn't appropriate to include the header line\n(`variant` in the output above).\nA nice little **trick to exclude the first line of a file is `tail -n +2`**:\n\n```bash\ntail -n +2 metadata/meta.tsv | cut -f 3 | sort\n```\n```{.bash-out}\nA178V\nA178V\nA178V\nA178V\nG31V\nG31V\nG31V\nG31V\n```\n\nThird, **the `uniq` command** will remove _consecutive_ duplicate lines &mdash;\nfor that reason,\nits input needs to be sorted if we want to remove _all_ duplicates:\n\n```bash\ntail -n +2 metadata/meta.tsv | cut -f 3 | sort | uniq\n```\n```{.bash-out}\nA178V\nG31V\n```\n\nFor large input files, it's most often useful to either:\n\n- Simply get the number of unique values that occur in a column by piping into `wc -l`:\n\n```bash\ntail -n +2 metadata/meta.tsv | cut -f 3 | sort | uniq | wc -l\n```\n```{.bash-out}\n2\n```\n\n- Get a \"count table\" showing how many times each value in a column occurs\n  using `uniq`'s `-c` option:\n\n```bash\ntail -n +2 metadata/meta.tsv | cut -f 3 | sort | uniq -c\n```\n```{.bash-out}\n      4 A178V\n      4 G31V\n```\n\n<br>\n\n### Getting GTF summary stats with `cut`, `uniq`, and `grep`\n\nHow many snRNAs are in the annotation?\n\n```bash\n# Because the 'gene_biotype' attribute only occurs in 'gene' entries,\n# we can simply count the number of lines found by grep:\ngrep -c 'gene_biotype \"snRNA\"' data/ref/GCF_000001405.40.gtf\n```\n```{.bash-out}\n172\n```\n\nHow many \"RASD\" genes are in the annotation?\n\n```bash\n# After getting all RASD entries (for different feature types), we can select\n# only 'gene' entries by cutting column 3 (feature types) and grep for 'gene':\ngrep 'gene_id \"RASD' data/ref/GCF_000001405.40.gtf | cut -f 3 | grep -c \"gene\"\n```\n```{.bash-out}\n2\n```\n\nWhich feature types are present and what are their counts?\n\n```bash\n# Column 3 contains the feature types\ngrep -v \"^#\" data/ref/GCF_000001405.40.gtf | cut -f 3 | sort | uniq -c\n```\n```{.bash-out}\n1835339 CDS\n2291763 exon\n  67127 gene\n 145185 start_codon\n 144753 stop_codon\n 200121 transcript\n```\n\n:::{.exercise}\n#### Your turn: more GTF exploration {-}\n\n- How many features are derived from each of the annotation sources (column 2)?\n\n<details><summary>Hint</summary>\nThe code to do this is nearly identical to the last example above,\nyou just have to cut a different column.\n</details>\n\n<details><summary>Solution</summary>\n\n```bash\ngrep -v \"#\" $gtf | cut -f 2 | sort | uniq -c\n```\n```{.bash-out}\n2141089 BestRefSeq\n  11308 BestRefSeq%2CGnomon\n   2955 cmsearch\n  21999 Curated Genomic\n2504737 Gnomon\n    150 RefSeq\n   2050 tRNAscan-SE\n```\n</details>\n\n- Above, we got counts of features by type (gene, exon, etc., in column 3).\n  Now, get separate counts of each feature type on each _strand_.\n\n<details><summary>Hint</summary>\nThe only thing you need to do differently compared to a single-column summary\nis to select two columns in your `cut` command\n(`uniq` will then automatically process the two columns).\n</details>\n\n<details><summary>Solution</summary>\n\n```bash\ngrep -v \"#\" data/ref/GCF_000001405.40.gtf | cut -f3,7 | sort | uniq -c\n```\n```{.bash-out}\n 916540 CDS     -\n 918799 CDS     +\n1143757 exon    -\n1148006 exon    +\n  33435 gene    -\n  33692 gene    +\n  71561 start_codon     -\n  73624 start_codon     +\n  71473 stop_codon      -\n  73280 stop_codon      +\n  98976 transcript      -\n 101145 transcript      +\n```\n</details>\n:::\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}