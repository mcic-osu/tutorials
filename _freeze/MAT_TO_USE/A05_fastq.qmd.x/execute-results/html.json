{
  "hash": "78576e276bbfd821f4ecf43c41a13adb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"FASTQ files\"\nsubtitle: \"And: gzip-compressed files, `grep`, checking file integrity, and write-protecting files\"\npagetitle: \"Genomic data files\"\nhighlight-style: github\nnumber-sections: true\nengine: knitr\nauthor: Jelmer Poelstra\ndate: 2023-08-11\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n-------\n\n<br>\n\n## Overview & setting up {-}\n\nOver the next two sessions,\nyou'll be introduced to three very common types of genomic data files,\nall of which you should have _when you start_ your analysis of, for example,\na reference-based RNAseq dataset.\n\nWe'll talk about the following three types of genomic data file:\n\n- **FASTQ** files:\n  When you get your sequence data back, it will be in this format,\n  which contains one entry per read,\n  and has per-base quality scores along with the sequence itself.\n- **FASTA** files:\n  Simpler sequence files,\n  where each entry contains just a header and a DNA or protein sequence.\n  Your reference genome assembly will be in this format.\n- **GTF** (& **GFF**) files:\n  These contain annotations in a tabular format,\n  e.g. the start & stop position of each gene.\n\n**This session will focus on FASTQ files**,\nwhich you should already have in your practice directory\n(if not, see the instructions below).\n[_In the next session_](./A06_ref-files.qmd),\nwe will download and explore reference genome FASTA and GFF files.\n\nYou'll also learn a number of new shell concepts and commands,\nsuch as commands to work with gzip-compressed files and `grep` to search for text.\n\nThe at-home reading below will cover how you can make important data read-only,\nand how you can check whether your data files were not accidentally modified\nupon transfer.\n\n#### Start VS Code and open your folder {-}\n\nAs always, we'll be working in VS Code &mdash;\nif you don't already have a session open, see below how to do so.\n\n**Make sure to open your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir**,\neither by using the `Open Folder` menu item,\nor by clicking on this dir when it appears in the `Welcome` tab.\n\n:::{.callout-tip collapse=\"true\"}\n## Starting VS Code at OSC - with a Terminal (Click to expand)\n1. Log in to OSC's OnDemand portal at <https://ondemand.osc.edu>.\n\n2. In the blue top bar, select `Interactive Apps`\n   and then near the bottom of the dropdown menu, click `Code Server`.\n\n3. In the form that appears on a new page:\n   - Select an appropriate OSC project (here: `PAS0471`)\n   - For this session, select `/fs/ess/PAS0471` as the starting directory\n   - Make sure that `Number of hours` is at least `2`\n   - Click `Launch`.\n\n4. On the next page, once the top bar of the box has turned green\n   and says `Runnning`, click `Connect to VS Code`.\n\n<figure><p align=\"center\"><img src=img/osc-code-launch_ed.png width=\"80%\"></p></figure>\n\n5. Open a Terminal by clicking\n   &nbsp; {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.\n   (Or use one of the keyboard shortcuts:\n   <kbd>Ctrl</kbd>+<kbd>\\`</kbd> (backtick) or\n   <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>.)\n\n6. In the `Welcome` tab under `Recent`,\n   you should see your `/fs/ess/PAS0471/<user>/rnaseq_intro` dir listed:\n   click on that to open it.\n   Alternatively, use\n   &nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`\n   to open that dir in VS Code.\n:::\n\n:::{.callout-warning collapse=\"true\"}\n#### Don't have your own dir with the data? (Click to expand)\nIf you missed the last session, or deleted your `rnaseq_intro` dir entirely,\nrun these commands to get a (fresh) copy of all files:\n\n```bash\nmkdir -p /fs/ess/PAS0471/$USER/rnaseq_intro\ncp -r /fs/ess/PAS0471/demo/202307_rnaseq /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nAnd if you do have an `rnaseq_intro` dir,\nbut you want to start over because you moved or removed some of the files\nwhile practicing, then delete the dir before your run the commands above:\n\n```bash\nrm -r /fs/ess/PAS0471/$USER/rnaseq_intro\n```\n\nYou should have at least the following files in this dir:\n\n```{.bash-out}\n/fs/ess/PAS0471/demo/202307_rnaseq\n├── data\n│   └── fastq\n│       ├── ASPC1_A178V_R1.fastq.gz\n│       ├── ASPC1_A178V_R2.fastq.gz\n│       ├── ASPC1_G31V_R1.fastq.gz\n│       ├── ASPC1_G31V_R2.fastq.gz\n│       ├── Miapaca2_A178V_R1.fastq.gz\n│       ├── Miapaca2_A178V_R2.fastq.gz\n│       ├── Miapaca2_G31V_R1.fastq.gz\n│       └── Miapaca2_G31V_R2.fastq.gz\n├── metadata\n│   └── meta.tsv\n└── README.md\n```\n\n:::\n\n<br>\n\n## The FASTQ format\n\nFASTQ is a very common output format of high-throughput sequencing machines &mdash;\nat least from Illumina sequencing,\nyou will almost always receive the sequences in this format.\n_Like most genomic data files, these are plain text files_,\nand each sequence that is read by the sequencer (i.e., each \"read\")\nforms **one FASTQ entry represented by four lines**.\nThe lines contain, respectively:\n\n1. A **header** that starts with `@` and e.g. uniquely identifies the read\n2. The **sequence** itself\n3. A **`+`** (plus sign)\n4. One-character **quality scores** for each base in the sequence\n\n<figure><p align=\"center\">\n<img src=img/fastq_header.png width=\"85%\">\n<figcaption>One entry (read) in a FASTQ file covers 4 lines.\n<br>The header line is annotated, with some of the more useful components highlighted in red.\n<br>For viewing purposes, this read (at only 56 bp) is shorter than regular Illumina read lengths.</figcaption>\n</p></figure>\n\nThe \"Q\" in FASTQ stands for \"_quality_\", to contrast this format with FASTA,\na more basic and generic format that does not include base quality scores.\nFASTQ files have the extension `.fastq` or `.fq`,\nbut they are very commonly gzip-compressed,\nin which case their name ends in `.fastq.gz` or `.fq.gz`.\n\n::: {.callout-note collapse=\"true\"}\n#### Understanding FASTQ quality scores (Click to expand)\n\nThe bottom line (starting with `JJJJ`) in the figure above contains a\nquality score for each base of the sequence in the second line.\nSpecifically, the characters on that line correspond to a numeric Phred quality\nscore (Q), which is defined as:\n\n>    **Q = -10 * log10(P)**\n\nIn the equation above, P is the estimated probability that a base call is\nerroneous &mdash;\nsee the table below for some specific probabilities and their rough qualitative\ninterpretation for Illumina data:\n\n| Phred quality score   | Error probability   | Rough interpretation |\n|-----------|-----------|-----------| \n| **10**    | 1 in 10      | terrible  |\n| **20**    | 1 in 100     | bad       |\n| **30**    | 1 in 1,000   | good      |\n| **40**    | 1 in 10,000  | excellent |\n\nWith Illumina data, these Phred quality scores typically go up to 42\n(though newer platforms like NovaSeq used _binned_ quality scores).\n**This numeric quality score is represented in FASTQ files _not by the number itself_,**\n**but by a corresponding \"ASCII character\",**\n**which _allows for a single-character representation_ of each possible score.**\n\nAs a consequence, each quality score character can conveniently correspond to \n(i.e., line up with) a base in the sequence:\ne.g., the 30th base number in a DNA sequence line corresponds to the 30th quality\nscore character two lines below that.\n  \nIn practice, you almost never have to manually check the quality scores of bases\nin FASTQ files,\nbut if you do want to know which character corresponds to which quality,\n[this Illumina webpage has a table](https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/QualityScoreEncoding_swBS.htm)\n(though note that Q41 = `J` and Q42 = `K` are missing).\n\n:::\n\n----\n\nIllumina sequencing is by far the most common for RNAseq[^1],\nand can be done in two \"modes\": **_single-end_** and **_paired-end_**.\nWith paired-end sequencing, each individual (c)DNA fragment is sequenced from two\nends in opposite directions \n(with the total size of the fragment &ndash;\"insert size\"&ndash;\ndetermining whether these two reads will overlap).\nThe resulting two, \"paired\", reads for each fragment are inextricably linked,\nwith the first called the **forward read** and the second called the\n**reverse read**.\n\n<figure><p align=\"center\">\n<img src=img/forward-reverse-reads.png width=\"85%\">\n<figcaption>How a DNA fragment prepared for paired-end Illumina sequencing will be sequenced. <br>In this example, the insert size is such that the forward and reverse reads do not overlap.</figcaption>\n</p></figure>\n\nMost commonly for paired-end data,\nforward and reverse reads are placed in separate files.\nAs such, you'll usually have two files[^2] for each sample that was sequenced:\n\n- The file with **forward reads has `_R1`** (or sometimes `_1`) in its name,\n  e.g. `ASPC1_A178V_R1.fastq.gz`\n- The file with **reverse reads has `_R2`** (or sometimes `_2`) in its name,\n  e.g. `ASPC1_A178V_R2.fastq.gz`\n  (i.e., the file name should be identical to that for the forward read,\n  except for the read direction identifier).\n  \nBecause the forward and reverse reads are so tightly linked,\nR1 and R2 files for one sample _should always contain the same number of reads_.\n(It is possible to end up with \"orphan\" reads,\nsuch as after one member of the pair is removed by quality filtering,\nbut these are either discarded or saved in separate files.)\n\n[^1]: Though long-read technologies like Oxford Nanopore Technologies and especially\n      PacBio are picking up steam, since these can sequence transcripts _in full_.\n\n[^2]: In some cases, most often when you simply do a lot of sequencing for each\n      sample, you'll get more than one pair of files:\n      one pair for each \"lane\" of the sequencer on which the sample was sequenced.\n\n<br>\n\n## Working with compressed (FASTQ) files\n\nLet's start by reminding ourselves about our own FASTQ files &mdash;\nrecall that this is a subset of the full dataset,\nwith way fewer reads reads per file than the originals,\nand with files for only four of the samples: \n\n```bash\nls -lh data/fastq\n```\n```{.bash-out}\ntotal 38M\n-rw-r--r-- 1 jelmer PAS0471 4.1M Jul 27 11:53 ASPC1_A178V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.2M Jul 27 11:53 ASPC1_A178V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.1M Jul 27 11:53 ASPC1_G31V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 4.3M Jul 27 11:53 ASPC1_G31V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.1M Jul 27 11:53 Miapaca2_A178V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.3M Jul 27 11:53 Miapaca2_A178V_R2.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.1M Jul 27 11:53 Miapaca2_G31V_R1.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 5.3M Jul 27 11:53 Miapaca2_G31V_R2.fastq.gz\n```\n\nThe FASTQ files all have a `.gz` extension\n(and should listed in red in your terminal),\nindicating they are \"gzip-compressed\".\nThis is a common type of compression for large genomic files.\n\nNext, we'll take a peak inside one of these files.\nIt's worth mentioning that during actual FASTQ file analysis (QC, trimming, alignment),\nyou're at most very rarely interacting with the raw contents of the file,\nsince bioinformatics programs take care of the details.\nWhile it is therefore possible to run your analysis while treating FASTQ \n(and other genomic) files as \"black boxes\",\n_it is helpful to at least have a rough idea of what a FASTQ file looks like_,\n_and how you can get some quick stats on them using basic shell commands_.\n\nLet's consider our options to look inside one of these files.\n`cat` will print the contents of the entire file to screen,\nwhich doesn't sound like a good idea for such a large file.\nOther than `less`, perhaps `head` will work well here?\nWe'll try to print 8 lines, which should show us two reads:\n\n```bash\nhead -n 8 data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n  \n<p align=\"left\"><img src=img/head2.png width=\"80%\"></p>\n\nOuch, what was that?!\nWhat happened here is that we are directly seeing the contents of the\n_compressed_ file, which is simply not human-readable.\nOther shell commands,\nlike those that count the number of lines (`wc -l`), or search for text\n(`grep`, see below),\nwould also run into trouble with compressed files[^3].\n\n[^3]: And they would fail in a possibly worse way because you might overlook the\n      problem: `wc -l` _will_ return a count yet this is not the number of lines\n      for the uncompressed file,\n      whereas a text search with `grep` may \"falsely\" return nothing while that\n      text _is_ present in the uncompressed file.\n\nTo get around all of this,\nwe might be inclined to **uncompress** these files,\nwhich we could do with the **`gunzip` command**.\nHowever, uncompressed files take up several times as much disk storage space as\ncompressed ones, and this can add up to a lot when we're talking about FASTQ files\nin particular.\nFortunately, there are other approaches available.\nFirst of all, almost any bioinformatics tool will accept compressed FASTQ files.\nAdditionally, the following commands and strategies should help you to do some\nbasic exploration of your FASTQ files without uncompressing them.\n\n\n::: {.callout-note collapse=\"true\"}\n#### Concatenating compressed files (Click to expand)\n\nLike with FASTA files,\nmultiple FASTQ files can simply be concatenated to produce a valid,\nlarger FASTQ file.\n\nIt generally doesn't make sense to concatenate files from different samples,\nbut a relatively common situation in which you might want to concatenate FASTQs\nis when you have multiple files for each sample,\noriginating _from different Illumina \"lanes\"_.\n\nIn the previous session,\nwe saw that it is very easy to concatenate files in the shell using `cat`,\neven if there are many of them and/or the files are very large.\n\nConcatenating _compressed files_ is also really straightforward &mdash;\nthe example below would concatenate two files from different Illumina lanes\n(`L001` and `L002`), separately for the forward and reverse reads: \n\n```bash\n# Fictional example; note that we concatenate the R1 and R2 files separately\ncat sampleA_L001_R1.fastq.gz sampleA_L002_R1.fastq.gz > sampleA_R1.fastq.gz\ncat sampleA_L001_R2.fastq.gz sampleA_L002_R2.fastq.gz > sampleA_R2.fastq.gz\n```\n:::\n\n<br>\n\n### `less` / `zless`\n\nAs you may recall from the previous session,\nwe were actually able to directly view a compressed FASTQ file with `less`!\n`less` also has a `zless` counterpart that is explicitly meant to display\ngzip-compressed files, but at least at OSC, `less` itself will also work:\n\n```bash\nless data/fastq/ASPC1_A178V_R1.fastq.gz\n# (Recall, press 'q' to quit less)\n```\n\n::: {.callout-note}\n#### Avoid line-wrapping by `less`\n\nDepending on your zoom level and the length of reads in your FASTQ file,\nsome lines may contain too many characters to fit on your screen.\nIf that's the case, \n`less` will by default \"wrap\" those lines onto the next line on your screen,\nso characters won't run off the screen on the right-hand side. \nThat may be useful when the file contains text you're trying to read in full,\nbut it is often confusing for files like FASTQ as well as for tabular files.\n\nTo turn off line-wrapping, call `less` with the `-S` option:\n\n```bash\nless -S data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n:::\n\n<br>\n\n### `zcat`\n\nLike the `less`/`zless` pair,\n`cat` has a counterpart that will print the uncompressed contents of a compressed\nfile: **`zcat`**.\n\nOf course, we just established that `cat`'s behavior of printing all the contents\nof a file isn't great for large FASTQ files.\nBut `zcat` is nevertheless very useful for FASTQ files \nwhen we combine it with the pipe, `|`.\nFor example, we can pipe the output of `zcat` to the `head` command to view\nthe first 8 lines (2 reads) as follows:\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | head -n 8\n```\n```{.bash-out}\n@A00195:432:HC7JWDRX3:2:1241:25093:24627 1:N:0:CCGATCGT+GACTGTTT\nGAACTAACCAAAGTGTGCTGAACATTATTAGGCTCTCCAGACATGTCTAGTTTATACTGGTAAATGCATATCAATTGTAAATATAAAAATAAAATTTGCAT\n+\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFF:FFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFF:F:F,F:FF\n@A00195:432:HC7JWDRX3:1:1232:30716:27226 1:N:0:CCGATCGT+GACTGTTT\nGTCCGGACCTTCTTGACGTAAGTGACATCTGGGTGGTGTTTGGGCGGCATGAGCAGCAGATGCAGCCGCTCATAGAACTGGATCCCGTTAAGGGAGGTGAC\n+\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n```\n\nAlong the same lines, we can count the number of lines in a FASTQ file like so:\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | wc -l\n```\n```{.bash-out}\n400000\n```\n\n::: {.exercise}\n#### Your Turn: The number of reads in a FASTQ file {-}\n\n- Given the output of the command above, how many reads are in this FASTQ file?\n\n- What line count do you get when you run `wc -l` directly on the compressed file? \n\n<details><summary>Solutions</summary>\n\n- There are 400,000 / 4 = 100,000 reads in this file\n\n- You'll get a line count of 15,358, quite a ways off from the 400,000 lines\n  in the uncompressed file! So, don't do this when you want to count lines/reads!\n\n```bash\nwc -l data/fastq/ASPC1_A178V_R1.fastq.gz \n```\n```{.bash-out}\n15358 data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n</details>\n:::\n\n::: {.exercise}\n#### Your Turn: Getting the read length (advanced) {-}\n\nWhat is the read length for these FASTQ files?\nCan you get the answer using the commands we have covered so far?\n\n_Two extra pieces of information:_\n\n- _`wc -c` will return the number of **characters** in its input._\n- _Nearly all reads in Illumina FASTQ files have the same length,_\n  _so you can examine the length of a single read to get your answer._\n\n<details><summary>Hints</summary>\n\n- Recall that the number of characters in e.g. the second (and the fourth) line\n  of a FASTQ file corresponds to the read length.\n\n- Think about how you might be able to use `head` and `tail`,\n  each with the `-n` option, and back-to-back,\n  to get a single, specific line from a file.\n\n- String all four commands together in a single line using the pipe `|`.\n\n</details>\n\n<details><summary>Solution</summary>\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | head -n 2 | tail -n 1 | wc -c\n```\n```{.bash-out}\n102\n```\n\nYou can extract any line from a text file by its line number `N` using\n`head -n N | tail -n 1`:\nthe last line from `head`'s output will be the line of interest,\nwhich you can then isolate with `tail -n 1`. \n\nOne (annoying) little twist here is that `wc -c` will include the newline\n\"character\" in its count: as such, the read length is 102 - 1 = **101**.\n\n</details>\n:::\n\n<br>\n\n## Finding text with `grep` / `zgrep`\n\n**`grep` allows you to search a file for any text or text patterns.**\nBy default, it will _return the entire line_ whenever it finds a match,\nand it is often set up (including at OSC) to highlight, within that line,\nthe matching text in\n<span style=\"color:red\"><b>bold red</b></span> in its output.\n\nFor example,\nlet's say we wanted to print the sequences in our FASTQ file that contain\n\"ACCGATACG\":\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | grep \"ACCGATACG\"\n```\n\n<p align=\"left\"><img src=img/grep_on_fastq.png width=\"98%\"></p>  \n\nIf we wanted to know _how many_ reads contain a certain sequence\n(e.g, the shorter and therefore more common \"CCAGTA\"),\nwe can simply pipe `grep`'s output into `wc -l`:\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | grep \"CCAGTA\" | wc -l\n```\n```{.bash-out}\n1118\n```\n\n`grep` has _many_ options &mdash; one of those is `-c`,\nwhich will directly _count_ matching lines instead of printing them\n(i.e., the command below is an alternative to the command above where we piped\n`grep`s output into `wc -l`):\n\n```bash\nzcat data/fastq/ASPC1_A178V_R1.fastq.gz | grep -c \"CCAGTA\"\n```\n```{.bash-out}\n1118\n```\n\n<br>\n\n`grep` even has a `zgrep` counterpart for gzip-compressed files,\nso the above can be further shortened by omitting `zcat` and passing the FASTQ\nfile name as an argument to `zgrep`:\n\n```bash\nzgrep -c \"CCAGTA\" data/fastq/ASPC1_A178V_R1.fastq.gz\n```\n```{.bash-out}\n1118\n```\n\nWe could also create a new FASTQ file whose sequences match our search by\nprinting one line before each match (`-B1`) and two lines after it (`-A2`):\n\n```bash\nzgrep -B1 -A2 --no-group-separator \"CCAGTA\" data/fastq/ASPC1_A178V_R1.fastq.gz > CCAGTA.fastq \n```\n\nAmong many other options,\n`grep` can also search multiple files at once\n(simply pass multiple filenames as arguments like with other commands,\ne.g. using a glob pattern to select them),\nand it can even search directories recursively using the `-R` flag.\n\n<br>\n\n## At-home reading: raw data management {-}\n\n### Making your valuable data read-only {-}\n\nYour raw FASTQ data is extremely invaluable as it contains the result\nof your experiment and was produced by an expensive sequencing process.\nEven after you've produced \"clean versions\" of these files after quality and adapter\ntrimming, or after you have generated your final gene count tables,\nyou'll always want to keep these files around.\nFor example,\nthese are the foremost files you need to **make publicly available** \nwhen you publish your results\n(they are typically deposited at the **[NCBI's SRA](https://www.ncbi.nlm.nih.gov/sra)**),\nthey ensure that your results can be reproduced by yourself and others,\nand they allow for a modified re-analysis of the data after e.g. new methods or\nrelevant data become available.\n\nYou should therefore keep at least one copy of your FASTQ files in a Project dir\n(as opposed to a Scratch dir) at OSC &mdash;\nrecall that these dirs are being backed up daily by OSC!\nYou'll also want to keep at least one copy of the data outside of OSC.\n\nEven with those automatic back-ups and extra copies,\nit's still good practice to be careful with your copy of the data at OSC.\nIn the previous session,\nwe learned that file removal with (e.g.) `rm` is permanent and irreversible,\nand performing an accidental removal of some of your FASTQ files or the entire dir\nwith a wrong command is not _that_ far-fetched.\nTo make this much less likely to happen,\n**it's a good idea to \"write-protect\" your FASTQ files**\n(or, phrased differently, to make them \"read-only\").\n\nFirst, let's briefly recap and expand our knowledge of file permissions:\n\n- **Read permissions** allow you to read and copy files/dirs\n- **Write permissions** allow you to move, rename, modify, overwrite, or delete\n- _Execute permissions_ allow you to directly execute a file\n  (e.g. running a program, or a script as a command).\n\nThese permissions can be most easily set for three different groups of people:\n\n- **Owner (or \"user\")** &mdash;\n  By default, this the person that created the file or dir.\n  After you have copied or downloaded some FASTQ files, for example,\n  you are the owner of these copies.\n- **Group** &mdash;\n  When you create a file in the PAS0471 project dir, its \"group\" will include\n  all members of the OSC project PAS0471.\n- **Other** &mdash;\n  In the example above,\n  anyone with access to OSC that is not a member of PAS0471.\n\nWe can see what these permissions are for any file or dir by looking at the\n**first column of the output of `ls -l`**.\nLet's practice write-protection and its consequences with a dummy file &mdash;\nfirst, we create the dummy file and check the default permissions:\n\n```bash\ntouch permission_test_file\n\nls -l permission_test_file\n```\n```{.bash-out}\n# (Note, the very first dash below is about file _type_, not permissions:)\n -rw-r--r-- 1 jelmer PAS0471 0 Aug  7 16:27 permission_test_file\n```\n\n<figure><p align=\"left\"><img src=img/permissions.svg width=\"80%\"></p></figure>\n\nThe command to set (read/write/execute) permissions for these categories of people\n(user/group/others, or everyone together) is `chmod`.\nThere are multiple ways of using this command,\nbut a common one is along the lines of `chmod <who><operation><permission>`,\nwith e.g.:\n\n- `chmod a-w` meaning _\"all minus write\"_: remove write-permissions for all\n- `chmod o+r` meaning _\"others plus read\"_: add read-permissions for others.\n\nTo remove write-permission for everyone, including yourself, we will use:\n\n```bash\nchmod a-w permission_test_file\n\nls -l permission_test_file\n```\n```{.bash-out}\n# (Notice that there is no longer a 'w' in the sequence below:)\n-r--r--r-- 1 jelmer PAS0471 0 Aug  7 16:27 permission_test_file\n```\n\nNow, let's see what happens when we try to remove this file:\n\n```bash\nrm permission_test_file\n```\n```{.bash-out}\nrm: remove write-protected regular empty file ‘permission_test_file’? n\n```\n\nNote that we can _still_ remove this file by answering `y`,\nbut we will hopefully not act _that_ carelessly,\nand the question will make us reconsider and press `n`\n(also, if you made a mistake in a script that you run _non-interactively_,\nit will fail to remove write-protected files).\n\nFinally, let's actually write-protect our FASTQ files,\nand the reference genome files:\n\n```bash\nchmod a-w data/fastq/* data/ref/*\n```\n\n::: {.callout-warning collapse=\"true\"}\n#### Access permissions for directories (Click to expand)\nOne tricky aspects of file permissions is that to **list** a directory's content,\nor to **`cd` into it**, you need *execute* permissions for the dir\n(and not read permissions as you might have expected)!\nThis is something to take into account when you want to grant others\naccess to a directory at OSC.\n\nTo set execute permissions *only for dirs* throughout a dir hierarchy:\n```sh\nchmod -R a+X my_large_dir       # Note the *uppercase* X\n```\n\nMore intuitive is that when you don't have write-permissions for a dir,\nit's not just that you can't delete or modify any of the files in it,\nbut you're also not able to create or copy your own files there.\nTherefore, if you want someone to obtain their own copy of one of your files,\nyou'll typically have to get _them_ to run the `cp` command.\n:::\n\n<br>\n\n### Checking file integrity after transfer {-}\n\nWhen you receive your FASTQ files from a sequencing facility,\na small text file will usually accompany your FASTQ files,\nand will have a name along the lines of\n`md5.txt`, `md5checksums.txt`, or `shasums.txt`.\n\nSuch a file contains so-called **checksums**,\na sort of digital fingerprints for your FASTQ files,\nwhich can be used to **check whether your copy of these files is completely intact**.\nChecksums are extremely compact summaries of files,\ncomputed so that even if just one character is changed in the data,\nthe checksum will be different.\n\nFor example, in the dir with the original FASTQ files for our focal project,\nthe following `md5.txt` file is present:\n\n```bash\nls -lh /fs/ess/PAS0471/jelmer/assist/2023-08_hy/data/fastq | head -n 6\n```\n```{.bash-out}\ntotal 48G\n-rw-r--r-- 1 jelmer PAS0471 3.4K Aug  9 16:33 md5.txt\n-rw-r--r-- 1 jelmer PAS0471 1.2G Aug  9 16:33 X10784_Cruz-MonserrateZ_ASPC1_vec_V1N_1_S25_R1_001.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 1.2G Aug  9 16:33 X10784_Cruz-MonserrateZ_ASPC1_vec_V1N_1_S25_R2_001.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 1.3G Aug  9 16:33 X10785_Cruz-MonserrateZ_ASPC1_RASD1_V1N_1_S26_R1_001.fastq.gz\n-rw-r--r-- 1 jelmer PAS0471 1.4G Aug  9 16:33 X10785_Cruz-MonserrateZ_ASPC1_RASD1_V1N_1_S26_R2_001.fastq.gz\n```\n\n::: {.callout-note}\n#### More on checksums\nSeveral algorithms and their associated shell commands can compute checksums.\nLike in our case, you'll most often see _md5_ checksums accompany\ngenomic data files,\nwhich can be computed and checked with the `md5sum` command\n(the newer _SHA-1_ checksums can be computer and checked with the very\nsimilar `shasum` command).\n\nChecksums consist of _hexadecimal_ characters only: numbers and the letters a-f.\n\nWe typically compute or check checksums for one or more _files_,\nbut we can even do it for a _string of text_ &mdash;\nthe example below demonstrates that the slightest change in a string\n(or file alike) will generate a completely different checksum:\n\n```bash\necho \"bioinformatics is fun\" | md5sum\n```\n```{.bash-out}\n010b5ebf7e207330de0e3fb0ff17a85a  -\n```\n```bash\necho \"bioinformatic is fun\" | md5sum\n```\n```{.bash-out}\n45cc2b76c02b973494954fd664fc0456  -\n```\n:::\n\nLet's take a look at our checksums &mdash;\nthe file has one row per file and two columns,\nthe first with the checksum and the second with the corresponding file name: \n\n```bash\nhead -n 4 /fs/ess/PAS0471/jelmer/assist/2023-08_hy/data/fastq/md5.txt\n```\n```{.bash-out}\n54224841f172e016245843d4a8dbd9fd        X10790_Cruz-MonserrateZ_Panc1_vec_V1N_1_S31_R2_001.fastq.gz\ncf22012ae8c223a309cff4b6182c7d62        X10790_Cruz-MonserrateZ_Panc1_vec_V1N_1_S31_R1_001.fastq.gz\n647a4a15c0d55e56dd347cf295723f22        X10797_Cruz-MonserrateZ_Miapaca2_RASD1_V1N_1_S38_R2_001.fastq.gz\nce5d444f8f9d87d325dbe9bc09ef0470        X10797_Cruz-MonserrateZ_Miapaca2_RASD1_V1N_1_S38_R1_001.fastq.gz\n```\n\nThis file was created by the folks at the sequencing facility,\nand now that we have the data at OSC and are ready to analyze it,\nwe can check if they are still fully intact\nand didn't &ndash;for example&ndash; get incompletely transferred.\n\nI have done this check for the original files,\nbut this takes a little while, and for a quick exercise,\nwe can now do so with our subsampled FASTQ files.\nFirst, let's copy a file `md5.txt` from the `demo` directory,\nwhich has the checksums for the subsampled FASTQ files as I created them:\n\n```bash\ncp /fs/ess/PAS0471/demo/202307_rnaseq/data/fastq/md5sums.txt data/fastq/\n```\n\nTo check whether the checksums for one or more files in a file correspond to\nthose for the files,\nwe can run `mdsum -c <mdsum-file>`,\nand should do so _while inside the dir with the files of interest_[^7].\nFor example:\n\n[^7]: This technically depends on how the file names are shown in the text file\n      with the checksums:\n      if there are just file names without directories (or `./<filename>`, etc.),\n      you'll have to be in the dir with the files to run `md5sum -c`.\n      (This in turn depends on from where the checksums were _generated_:\n      if you generate them while in the dir with the focal files,\n      which is the only sensible way to do this, that's how they will be displayed.)\n\n```bash\ncd data/fastq\nmd5sum -c md5sums.txt \n```\n```{.bash-out}\nASPC1_A178V_R1.fastq.gz: OK\nASPC1_A178V_R2.fastq.gz: OK\nASPC1_G31V_R1.fastq.gz: OK\nASPC1_G31V_R2.fastq.gz: OK\nMiapaca2_A178V_R1.fastq.gz: OK\nMiapaca2_A178V_R2.fastq.gz: OK\nMiapaca2_G31V_R1.fastq.gz: OK\nMiapaca2_G31V_R2.fastq.gz: OK\n```\n\nIf there were any differences,\nthe `md5sum` command would clearly warn you about them,\nas you can see in the exercise below.\n\n::: {.callout-note collapse=\"true\"}\n#### Making the checksum check fail (Click to expand)\n\nLet's compute a checksum for the `README.md` file and save it in a file:\n\n```bash\n# Assuming you went into data/fastq above;\n# you need to be in /fs/ess/PAS0471/$USER/rnaseq-intro\ncd ../..\n\nmd5sum README.md > md5sum_for_README.txt\n\ncat md5sum_for_README.txt\n```\n```{.bash-out}\nd4c4a8df4870f68808553ac0f5484aa3  README.md\n```\n\nNow, let's add a line to our `README.md` that says where the reference genome\nfiles are:\n\n```bash\n# (You'll need single quotes like below, or the shell will interpret the backticks)\necho 'Files for the GRCh38.p14 human genome are in the `data/ref` dir' >> README.md\n\ntail -n 3 README.md\n```\n```{.bash-out}\nand columns specifying the read direction, sample ID, cell line, and variant.\n\nFiles for the GRCh38.p14 human genome are in the `data/ref` dir\n```\n\nFinally, let's check the checksum, and watch it fail:\n\n```bash\nmd5sum -c md5sum_for_README.txt\n```\n```{.bash-out}\nREADME.md: FAILED\nmd5sum: WARNING: 1 computed checksum did NOT match\n```\n:::\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}